struct node {
    int next[26];
    int len;
    int sufflink;
    int num;
};
struct Palindromic_Tree{
int len;
char s[maxn];
node tree[maxn];
int num;            // node 1 - root with len -1, node 2 - root with len 0
int suff;           // max suffix palindrome
long long sumpal;

bool addLetter(int pos) {
    int cur = suff, curlen = 0;
    int let = s[pos] - 'a';

    while (true) {
        curlen = tree[cur].len;
        if (pos - 1 - curlen >= 0 && s[pos - 1 - curlen] == s[pos])
            break;
        cur = tree[cur].sufflink;
    }
    if (tree[cur].next[let]) {
        suff = tree[cur].next[let];
        return false;
    }

    num++;
    suff = num;
    tree[num].len = tree[cur].len + 2;
    tree[cur].next[let] = num;

    if (tree[num].len == 1) {
        tree[num].sufflink = 2;
        tree[num].num = 1;
        return true;
    }

    while (true) {
        cur = tree[cur].sufflink;
        curlen = tree[cur].len;
        if (pos - 1 - curlen >= 0 && s[pos - 1 - curlen] == s[pos]) {
            tree[num].sufflink = tree[cur].next[let];
            break;
        }
    }
    tree[num].num = 1 + tree[tree[num].sufflink].num;
    return true;
}

void initTree() {
    num = 2; suff = 2;
    tree[1].len = -1; tree[1].sufflink = 1;
    tree[2].len = 0; tree[2].sufflink = 1;

    scanf("%s", s);             //读入注意
    len = strlen(s);
    for (int i = 0; i < len; i++) {
        addLetter(i);
        sumpal += tree[suff].num;
    }
}
};

*************************************
节点之间通过有向边连接起来，回文树中有两种类型的边，第一种类型的边上同时有字符做标记，比如：u和v通过带字符X的边连接起来，表示节点u所表示的回文串两边添加X字符可以得到v节点所表示的回文串。以下是一个例子： 

回文树中另一种类型的边是后缀链接边(suffix link)。从u到w存在一条后缀链接边，当且仅当w节点所代表的回文串是u的后缀中最长的回文串，但w和u不能相同（后缀：包含最后一个字符的子串，bcd是abcd的后缀，但bc不是abcd的后缀）。

