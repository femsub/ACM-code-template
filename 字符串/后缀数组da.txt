struct SuffixArray{
const static int N = maxn;
int wa[N], wb[N], ws[N], wv[N];
int sa[N],rank[N], height[N],r[N];
int Log[N],st[N][25];
bool cmp(int r[], int a, int b, int l) {return r[a] == r[b] && r[a+l] == r[b+l];}
void da(int r[], int sa[], int n, int m) {
    int i, j, p, *x = wa, *y = wb;
    for (i = 0; i < m; ++i) ws[i] = 0;
    for (i = 0; i < n; ++i) ws[x[i]=r[i]]++;
    for (i = 1; i < m; ++i) ws[i] += ws[i-1];
    for (i = n-1; i >= 0; --i) sa[--ws[x[i]]] = i;
    for (j = 1, p = 1; p < n; j *= 2, m = p) {
        for (p = 0, i = n - j; i < n; ++i) y[p++] = i;
        for (i = 0; i < n; ++i) if (sa[i] >= j) y[p++] = sa[i] - j;
        for (i = 0; i < n; ++i) wv[i] = x[y[i]];
        for (i = 0; i < m; ++i) ws[i] = 0;
        for (i = 0; i < n; ++i) ws[wv[i]]++;
        for (i = 1; i < m; ++i) ws[i] += ws[i-1];
        for (i = n-1; i >= 0; --i) sa[--ws[wv[i]]] = y[i];
        for (swap(x, y), p = 1, x[sa[0]] = 0, i = 1; i < n; ++i)
            x[sa[i]] = cmp(y, sa[i-1], sa[i], j) ? p-1 : p++;
    }
}
void calheight(int r[], int sa[], int n) {              // 这里的n是原串的本来长度，即不包括新增的0
    int i, j, k = 0;
    for (i = 1; i <= n; ++i) rank[sa[i]] = i;           // rank[n]从x开始的后缀的排名   0~n-1有效 rank[n]=0;
    for (i = 0; i < n; height[rank[i++]] = k)                  //height[i]表示排名第 i 的后缀与排名第 i-1 位的后缀的最长公共前缀的长度    2-n有效
        for (k?k--:0, j = sa[rank[i]-1]; r[i+k] == r[j+k]; k++);        //sa[i]表示排名为第 i 位的后缀是从sa[i]开始的  1-n有效 sa[0]=n
}                                                           //LCP(i,j)=min{LCP(k-1,k)|i+1<=k<=j}         （LCP Theorem）  LCP(i,j)排名第i j之间的最长公共字串
void init(char* s){
    int n=strlen(s),m=0;
    for (int i = 0; i < n; ++i){r[i]=s[i]-'a'+1;m=max(m,r[i]);}r[n]=0;	//******注意下限！！！
    da(r,sa,n+1,m+1);
    calheight(r,sa,n);
    Log[0]=-1;for(int i=1;i<=n;i++)Log[i]=Log[i>>1]+1;
    for(int i=1;i<=n;i++)st[i][0]=height[i];
    for(int y=1;y<=Log[n];y++)
        for(int x=1;x<=n&&x+(1<<y)-1<=n;x++)
            st[x][y]=min(st[x][y-1],st[x+(1<<(y-1))][y-1]);
}
int query(int a,int b){//从a开始的后缀与从b开始的后缀的最大公共前缀长度 0开始
    a=rank[a];b=rank[b];
    if(a>b)swap(a,b);a++;
    int t=Log[b-a+1];
    return min(st[a][t],st[b-(1<<t)+1][t]);
}
}SA;