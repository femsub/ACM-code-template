const int N=10;//max
int n, p[N];
int s[N], str[N];
#define _min(x, y) ((x)<(y)?(x):(y))
void kp()
{
    int i;
    int mx = 0;
    int id;
    for(i=n; str[i]!=0; i++)
        str[i] = 0;
    for(i=1; i<n; i++)
    {
        if( mx > i )
            p[i] = _min( p[2*id-i], p[id]+id-i );
        else
            p[i] = 1;
        for(; str[i+p[i]] == str[i-p[i]]; p[i]++)
            ;
        if( p[i] + i > mx )
        {
            mx = p[i] + i;
            id = i;
        }
    }
}

void init()
{
    int i;
    str[0] = '$';
    str[1] = '#';
    for(i=0; i<n; i++)
    {
        str[i*2+2] = s[i];
        str[i*2+3] = '#';
    }
    n = n*2+2;
    s[n] = 0;
}
//#j#k#
n为长度
P［id］就是该回文子串在原串中的长度（包括‘#’）
mx记在i之前的回文串中，延伸至最右端的位置。同时用id这个变量记下取得这个最优mx时的id值