const int NUM = 1<<20;
int  wn[NUM],bitrev[NUM];
    // p                   | deg | g        长度为2^k,且N|(p-1),p=c*(1<<k)+1,g为原根，g^phi(p)=1 %p的最小g
    // 469762049             26    3
    // 998244353             23    3
    // 1004535809            21    3
    // 1107296257            24    10
    // 10000093151233        26    5
    // 1000000523862017      26    3
    // 1000000000949747713   26    2
LL mu(LL a,LL b,LL P)
{
    LL ans=1;
    while(b)
    {
        if(b&1)
            ans=ans*a%P;
        a=a*a%P;
        b>>=1;
    }
    return ans;
}
void GetWn(int G,int P,int len)
{
    wn[0] = 1, wn[1] = mu(G, (P - 1) / len, P);
	for(int i = 2; i < len; i++)
		wn[i] = 1LL * wn[i - 1] * wn[1] % P;
	int L=__builtin_ctz(len);
	for(int i=0;i<len;i++) bitrev[i] = bitrev[i >> 1] >> 1 | ((i & 1) << (L - 1));
}
void NTT(int a[], int len, int on,int P)
{
    for(int i=0;i<len;i++) if (i < bitrev[i]) swap(a[i], a[bitrev[i]]);
    for(int h = 2; h <= len; h <<= 1) {
		int unit = on == -1 ? len - len / h : len / h;
		int hf = h >> 1;
		for(int i = 0; i < len; i += h) {
			int w = 0;
			for(int j = i; j < i + hf; j++) {
				int u = a[j], t = 1LL * wn[w] * a[j + hf] % P;
				if((a[j] = u + t) >= P) a[j] -= P;
				if((a[j + hf] = u - t) < 0) a[j + hf] += P;
				if((w += unit) >= len) w -= len;
			}
		}
	}
	if(on == -1) {
		int inv = mu(len, P - 2, P);
		for(int i = 0; i < len; i++) a[i] = 1LL * a[i] * inv % P;
	}
}


    LL N=1ll<<20,g=3,P=469762049ll;
    GetWn(g,P,N);
    NTT(a, N, 1,P);
    NTT(b, N, 1,P);
    for(int i = 0; i < N; i++)
        a[i] = a[i] * b[i] % P;
    NTT(a, N, -1,P);


int callen(int len1,int len2){
    int len=1;
    while(len < (len1<<1) || len < (len2<<1))len<<=1;
    return len;
}

*****************************************
LL fftans[maxn],AA[maxn],BB[maxn];
void fft(LL* y1,int len1,LL* y2,int len2,LL mod)
{
	LL N=callen(len1,len2),g=3;
	for(int x=0;x<len1;x++)
		AA[x]=y1[x];
	for(int x=len1;x<N;x++)
		AA[x]=0;
	for(int x=0;x<len2;x++)
		BB[x]=y2[x];
	for(int x=len2;x<N;x++)
		BB[x]=0;
    GetWn(g,mod,N);
    NTT(AA, N, 1,mod);
	NTT(BB, N, 1,mod);
	for(int x=0;x<N;x++)
		fftans[x]=AA[x]*BB[x]%mod;
	NTT(fftans, N, -1,mod);
}