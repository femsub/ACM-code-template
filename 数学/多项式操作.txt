逆元
****************************
逆元完全取决于其常数项是否有逆元
A(x)B(x)≡1(modx^n)  

LL inv(LL a,LL p) //0<a<p,a%=p先
{
    if(a==0)return -1;
    if(a==1)return 1;
    return inv(p%a,p)*(p-p/a)%p;
}
void getinv(LL C[],LL D[],int t)
{
	if(t==1){D[0]=inv(C[0],MOD);return;}
	getinv(C,D,(t+1)>>1);
	fft(C,t,D,t,MOD);
	fft(fftans,t,D,t,MOD);
	for(int x=0;x<t;x++){D[x]=(2ll*D[x]-fftans[x])%MOD;if(D[x]<0)D[x]+=MOD;}
}

******************************
多项式取模
A=D*B+R A[n],B[m],n>=m,D[n-m+1],R[m-1]


void getdiv(LL A[],int n,LL D[],LL B[],int m,LL R[])
{
    reverse(A,A+n);
    reverse(B,B+m);
    getinv(B,D,n-m+1);
    fft(A,n-m+1,D,n-m+1,MOD);
    memcpy(D,fftans,(n-m+1)*sizeof(LL));
    fft(D,n-m+1,B,m,MOD);
    for(int x=0;x<m-1;x++){R[x]=A[x+n-m+1]-fftans[x+n-m+1];if(R[x]<0)R[x]+=MOD;}
    reverse(A,A+n);
    reverse(B,B+m);
    reverse(D,D+n-m+1);
    reverse(R,R+m-1);
}

********************************
多项式ln&exp 常数项为1时
int inv[maxn],invsz=1;
void initinv(int N){
    if(N<invsz)return;
	inv[0]=inv[1]=1;
	for(int x=1+invsz;x<=N;x++){inv[x]=(LL)(MOD-MOD/x)*inv[MOD%x]%MOD;}
	invsz=N;
	}
void getln(LL A[],int n,LL B[])//B=ln(A),A[0]=1,B[0]=0;
{                                  
    getinv(A,B,n);                 
    for(int x=0;x<n-1;x++)
        A[x]=A[x+1]*(x+1)%MOD;
    A[n-1]=0;                      
    fft(A,n,B,n,MOD);
    B[0]=0;                         
    initinv(n);
    for(int x=n-1;x;x--)
    {
        B[x]=fftans[x-1]*inv[x]%MOD;
        A[x]=A[x-1]*inv[x]%MOD;
    }
    A[0]=1;
}
LL exptem[maxn];
void getexp(LL A[],int n,LL B[])//B=exp(A),A[0]=0;
{
    if(n==1){B[0]=1;return;}
    int t=(n+1)>>1;
    getexp(A,t,B);
    for(int x=t+1;x<n;x++)B[x]=0;
    getln(B,n,exptem);
    for(int x=0;x<n;x++)
    {
        exptem[x]=((x==0)-exptem[x]+A[x])%MOD;
        if(exptem[x]<0)exptem[x]+=MOD;
    }
    fft(B,n,exptem,n,MOD);
    for(int x=0;x<n;x++)
        B[x]=fftans[x];
    return;
}
LL mu(LL a,LL b)
{
    LL ans=1;
    while(b)
    {
        if((b & 1)&&(ans*=a)>=MOD)
            ans%=MOD;
        b >>= 1;
        if((a*=a)>=MOD)
            a%=MOD;
    }
    return ans;
}
LL expt[maxn];
void exp(LL A[],LL n,LL B[],LL k)//B=A^k
{
	LL t=n;
	for(int x=0;x<n;x++)
		if(A[x])
		{
			t=x;
			break;
		}
	if(t*k>=n||k==0)
	{
		memset(B,0,n*sizeof(LL));
		if(k==0)B[0]=1;
		return ;
	}
	LL pt=mu(A[t],k),pt_inv=Inv(A[t],MOD);
    for(int x=t;x<n;x++)
		expt[x-t]=A[x]*pt_inv%MOD;
	for(int x=n-t;x<n;x++)
		expt[x]=0;
	getln(expt,n-k*t,B);
	for(int x=0;x<n-k*t;x++)
		B[x]=B[x]*k%MOD;
	getexp(B,n-k*t,expt);
	for(LL x=0;x<k*t;x++)
		B[x]=0;
	for(LL x=t*k;x<n;x++)
		B[x]=expt[x-t*k]*pt%MOD;
	return ;
}