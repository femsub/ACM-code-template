LL lucas(int n,int m){if(n>=MOD)return Cab(n%MOD,m%MOD)*lucas(n/MOD,m/MOD)%MOD;else return Cab(n,m);}

预处理MOD以内的逆元，原版if(m==0)return 0;
素数，非素数用CRT
*********************************************
线性求逆元，需要O(n)预处理


int inv[maxn],pin_inv[maxn],pin[maxn];
void initCab(int N){
	inv[0]=pin[0]=pin_inv[0]=inv[1]=pin[1]=pin_inv[1]=1;
	for(int x=2;x<=N;x++){
		inv[x]=(LL)(MOD-MOD/x)*inv[MOD%x]%MOD;
		pin[x]=(LL)pin[x-1]*x%MOD;
		pin_inv[x]=(LL)pin_inv[x-1]*inv[x]%MOD;}}
LL Cab(int n,int m){return (LL)pin[n]*pin_inv[m]%MOD*pin_inv[n-m]%MOD;}

********************************************
const int cn=100;
LL c[cn+1][cn+1];
void genc(){
	mem(c,0);
	for(int x=1;x<=cn;x++)
		for(int y=0;y<=x;y++)
			if(y==0||y==x)c[x][y]=1;
			else c[x][y]=c[x-1][y]+c[x-1][y-1];
}
***************************************
LL Cab(LL a,LL b)//b较小
{
    LL t=1,k=1,p;
    for(LL x=1;x<=b;x++)
        k*=x;
    for(LL x=a-b+1;x<=a;x++)
    {
        t*=x;
        p=__gcd(t,k);
        t/=p;
        k/=p;
    }
    return t;
}

