struct Complex
{
    double r,i;
    Complex(double _r = 0.0,double _i = 0.0){r = _r; i = _i;}
    Complex operator +(const Complex &b){return Complex(r+b.r,i+b.i);}
    Complex operator -(const Complex &b){return Complex(r-b.r,i-b.i);}
    Complex operator *(const Complex &b){return Complex(r*b.r-i*b.i,r*b.i+i*b.r);}
};
Complex conj(Complex a){return Complex(a.r,-a.i);}
Complex w[maxn];
int bitrev[maxn];
inline void fft_prepare(int len)
{
	int L=__builtin_ctz(len);
	for(int i=0;i<len;i++) bitrev[i] = bitrev[i >> 1] >> 1 | ((i & 1) << (L - 1));
	for(int i=0;i<len;i++) w[i] = Complex(cos(2 * PI * i / len), sin(2 * PI * i / len));
}
void FFT(Complex *a, const int &n)
{
	for(int i=0;i<n;i++) if (i < bitrev[i]) swap(a[i], a[bitrev[i]]);
	for (int i = 2, lyc = n >> 1; i <= n; i <<= 1, lyc >>= 1)
		for (int j = 0; j < n; j += i)
		{
			Complex *l = a + j, *r = a + j + (i >> 1), *p = w;
			for(int k=0;k<(i >> 1);k++)
			{
				Complex tmp = *r * *p;
				*r = *l - tmp, *l = *l + tmp;
				++l, ++r, p += lyc;
			}
		}
}
int callen(int len1,int len2){
    int len=1;
    while(len < (len1<<1) || len < (len2<<1))len<<=1;
    return len;
}
int fftans[maxn];
Complex A[maxn],B[maxn];
void fft(int* y1,int len1,int* y2,int len2){
    int len=callen(len1,len2);
    fft_prepare(len);
    for(int x=0;x<len1;x++)A[x].r=y1[x];
    for(int x=len1;x<len;x++)A[x].r=0;
    for(int x=0;x<len2;x++)A[x].i=y2[x];
    for(int x=len2;x<len;x++)A[x].i=0;
    FFT(A,len);
    int j;
    for(int x=0;x<len;x++)
    {
        j=(len-x)&(len-1);
        B[x]=(A[j]*A[j]-conj(A[x]*A[x]))*Complex(0,-0.25);
    }
    FFT(B,len);
    for(int x=0;x<len;x++)
        fftans[x]=(LL)(B[x].r/len+0.5);
}


//*************************************/
//nomal
struct complex{
    double r,i;
    complex(double _r = 0.0,double _i = 0.0){r = _r; i = _i;}
    complex operator +(const complex &b){return complex(r+b.r,i+b.i);}
    complex operator -(const complex &b){return complex(r-b.r,i-b.i);}
    complex operator *(const complex &b){return complex(r*b.r-i*b.i,r*b.i+i*b.r);}
};
void change(complex y[],int len){
    int i,j,k;
    for(i = 1, j = len/2;i < len-1; i++){
        if(i < j)swap(y[i],y[j]);
        k = len/2;
        while( j >= k){
            j -= k;
            k /= 2;
        }
        if(j < k) j += k;
    }
}
void FFT(complex y[],int len,int on){  //len=2^k
    change(y,len);
    for(int h = 2; h <= len; h <<= 1){
        complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h));
        for(int j = 0;j < len;j+=h){
            complex w(1,0);
            for(int k = j;k < j+h/2;k++){
                complex u = y[k];
                complex t = w*y[k+h/2];
                y[k] = u+t;
                y[k+h/2] = u-t;
                w = w*wn;
            }
        }
    }
    if(on == -1)
        for(int i = 0;i < len;i++)
            y[i].r /= len;
}
int callen(int len1,int len2){
    int len=1;
    while(len < len1*2 || len < len2*2)len<<=1;
    return len;
}
complex tf1[maxn],tf2[maxn];   //0~len1+len2-1,fftans[i] = y1[i] * y2[i]
int fftans[maxn];
void fft(int* y1,int len1,int* y2,int len2){ //0~len1-1,0~len2-1
    int len=callen(len1,len2);
    for(int i = 0;i < len1;i++)
        tf1[i] = complex(y1[i],0);
    for(int i = len1;i < len;i++)
        tf1[i] = complex(0,0);
    for(int i = 0;i < len2;i++)
        tf2[i] = complex(y2[i],0);
    for(int i = len2;i < len;i++)
        tf2[i] = complex(0,0);
    FFT(tf1,len,1);
    FFT(tf2,len,1);
    for(int i = 0;i < len;i++)
        tf1[i] = tf1[i]*tf2[i];
    FFT(tf1,len,-1);
    for(int i = 0;i < len1+len2-1;i++)
        fftans[i] = tf1[i].r+0.5;
}
