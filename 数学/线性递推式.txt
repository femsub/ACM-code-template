//#include <bits/stdc++.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <string>
using namespace std;
double esp=1e-11;
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#define fi first
#define se second
#define all(a) (a).begin(),(a).end()
#define cle(a) while(!a.empty())a.pop()
#define mem(p) memset(p,0,sizeof(p))
#define memf(p) memset(p,0x3f,sizeof(p))
#define memn(p) memset(p,-1,sizeof(p))
#define mp(A, B) make_pair(A, B)
#define pb push_back
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
typedef long long int LL;
typedef long double LF;
const double PI = acos(-1.0);
const LL INF=0x3f3f3f3f3f3f3f3f;
const LL MOD = 1000000009ll;
const int maxn=33000;
struct complex
{
    double r,i;
    complex(double _r = 0.0,double _i = 0.0)
    {
        r = _r; i = _i;
    }
    complex operator +(const complex &b)
    {
        return complex(r+b.r,i+b.i);
    }
    complex operator -(const complex &b)
    {
        return complex(r-b.r,i-b.i);
    }
    complex operator *(const complex &b)
    {
        return complex(r*b.r-i*b.i,r*b.i+i*b.r);
    }
}p1[maxn],p2[maxn];
void change(complex y[],int len)
{
    int i,j,k;
    for(i = 1, j = len/2;i < len-1; i++)
    {
        if(i < j)swap(y[i],y[j]);
        //交换互为小标反转的元素，i<j保证交换一次
        //i做正常的+1，j左反转类型的+1,始终保持i和j是反转的
        k = len/2;
        while( j >= k)
        {
            j -= k;
            k /= 2;
        }
        if(j < k) j += k;
    }
}
/*
 * 做FFT
 * len必须为2^k形式，
 * on==1时是DFT，on==-1时是IDFT
 */
void fft(complex y[],int len,int on)
{
    change(y,len);
    for(int h = 2; h <= len; h <<= 1)
    {
        complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h));
        for(int j = 0;j < len;j+=h)
        {
            complex w(1,0);
            for(int k = j;k < j+h/2;k++)
            {
                complex u = y[k];
                complex t = w*y[k+h/2];
                y[k] = u+t;
                y[k+h/2] = u-t;
                w = w*wn;
            }
        }
    }
    if(on == -1)
        for(int i = 0;i < len;i++)
            y[i].r /= len;
}
LL pre[maxn];
LL n,a,b,p,q,len;
struct mx
{
    LL p[maxn];
};
mx operator *(const mx A,const mx B)
{
    for(int x=0;x<len;x++)
        p1[x]=complex((double)A.p[x],0),p2[x]=complex((double)B.p[x],0);
    fft(p1,len,1);
    fft(p2,len,1);
    for(int x=0;x<len;x++)
        p1[x] = p1[x]*p2[x];
    fft(p1,len,-1);
    mx ans;
    for(int x=0;x<len;x++)
        ans.p[x] = ((LL)(p1[x].r+0.5))%119;
    for(int x=2*q;x>=q;x--)
    if(ans.p[x])
    {
        ans.p[x-p]=(ans.p[x-p]+a*ans.p[x])%119;
        ans.p[x-q]=(ans.p[x-q]+b*ans.p[x])%119;
        ans.p[x]=0;
    }                   //for(int x=0;x<len;x++)printf("%lld ",ans.p[x]);printf("\n");
    return ans;
}
mx mu()
{
    LL tem=n;
    mx ans,k;
    mem(ans.p);
    mem(k.p);
    ans.p[0]=1;
    k.p[1]=1;
    while(tem)
    {
        if(tem & 1)
            ans=ans*k;
        tem >>= 1;
        k=k*k;
    }
    return ans;
}
int main()
{
    //freopen("in.txt", "r", stdin);
    //freopen("A-large.in", "r", stdin);
    //freopen("A-large.out", "w", stdout);
    //map<long long int,int>ma;                 %I64d
    //vector<int>::iterator iter;
    //memset(m,0,sizeof(int));               for(iter=trtr[rt].begin();iter!=trtr[rt].end();iter++)
    //for(int x=1;x<=n;x++)
    //for(int y=1;y<=n;y++)
    //scanf("%d%d",&a,&b);
    //scanf("%d",&n);
    //printf("%d\n",ans);
    while(scanf("%I64d%I64d%I64d%I64d%I64d",&n,&a,&b,&p,&q)!=EOF)
    {
        a%=119;
        b%=119;
        pre[0]=1;
        for(int x=1;x<=2*q;x++)
        {
            pre[x]=0;
            if(x-p<=0)pre[x]=(pre[x]+a)%119;
            else pre[x]=(pre[x]+a*pre[x-p])%119;
            if(x-q<=0)pre[x]=(pre[x]+b)%119;
            else pre[x]=(pre[x]+b*pre[x-q])%119;
        }
        if(n<=2*q){printf("%I64d\n",pre[n]%119ll);continue;}
        len = 1;
        while(len < q*2 )len<<=1;
        mx ans=mu();
        LL an=0;                        //for(int x=q-1;x>=0;x--)printf("%lld %lld\n",ans.p[x],pre[x]);
        for(int x=q-1;x>=0;x--)
            an=(an+ans.p[x]*pre[x])%119;
        printf("%I64d\n",(an+119)%119);
    }
    return 0;
}

*************************
x<=0 f[x]=1
x>=1 f[x]=a*f[x-p]+b*f[x-q]		%119
求f[n]