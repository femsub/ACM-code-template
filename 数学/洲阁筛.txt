//#include <bits/stdc++.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <string>
#include <time.h>
using namespace std;
long double esp=1e-11;
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#define fi first
#define se second
#define all(a) (a).begin(),(a).end()
#define cle(a) while(!a.empty())a.pop()
#define mem(p,c) memset(p,c,sizeof(p))
#define mp(A, B) make_pair(A, B)
#define pb push_back
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
typedef long long int LL;
const long double PI = acos((long double)-1);
const LL INF=0x3f3f3f3fll;
const LL MOD =1000000007ll;
const int maxn=140100;
const int gn=2;
LL n,lim,sn,pn;
LL p[maxn+9],s[maxn+9],f[maxn+9],g[gn+1][maxn+9],l[maxn+9],upp[maxn+9],pre[gn+1][maxn];
bool is[maxn+9];
inline LL pos(LL x) {
    if(x <= lim) return x;
    else return sn-n/x+1;
}
inline void euler(int lim) {
    for(int x = 2; x <= lim; x++) {
        if(!is[x]) p[++pn] = x;
        for(int y = 1; y <= pn && 1ll*p[y]*x <= lim; y++) {
            is[x*p[y]] = true;
            if(x%p[y] == 0) break;
        }
    }
}
void calcg()
{
    for(int x = 1; x <= sn; x++) g[0][x] = s[x],g[1][x]=s[x]*(s[x]+1)/2,g[2][x]=s[x]*(s[x]+1)*(2*s[x]+1)/6;
    fill(l+1, l+sn+1, 0);
    for(LL x = 1, k = 1; x <= pn; x++) {
        LL t = p[x]*p[x];
        while(t > s[k] && k <= sn) ++k;
        for(LL y = sn; y >= k; y--) {
            int d = pos(s[y]/p[x]);
            t=1;
            for(int z=0;z<=gn;z++)
            g[z][y] -= t*(g[z][d]-(pre[z][min(upp[d]-1, x-1)]-pre[z][l[d]])),t*=p[x];
            l[y] = x;
        }
    }
    for(int x = 1; x <= sn; x++)
        for(int y=0;y<=gn;y++)
            g[y][x] -= pre[y][min(upp[x]-1, pn)]-pre[y][l[x]];
    for(int x = 1; x <= sn; x++) g[0][x]=1+(g[0][x]-1)-3*(g[1][x]-1)+3*(g[2][x]-1);
    //printf("g ");for(int x=1;x<=sn;x++)printf("%5u ",g[0][x]-1);puts("");
}
void calcf()
{
    fill(f+1, f+sn+1, 1);
    fill(l+1, l+sn+1, 0);
    for(LL x = pn, k = sn; x >= 1; x--) {
        LL t = p[x]*p[x];
        while(k > 1 && t <= s[k-1]) k--;
        for(LL y = sn; y >= k; y--) {
            LL pc = p[x];
            for(LL c = 1; pc <= s[y]; ++c, pc *= p[x]) {
                LL d = pos(s[y]/pc);
                f[y] += ((2*c+1)*pc*(pc-pc/p[x])+pc/p[x])*(f[d]+
                    max(0ll, pre[0][upp[d]-1]-pre[0][max(l[d], x)])+
                    -3*max(0ll, pre[1][upp[d]-1]-pre[1][max(l[d], x)])+
                    +3*max(0ll, pre[2][upp[d]-1]-pre[2][max(l[d], x)]));
            }
            if(!l[y]) l[y] = x;
        }
    }
    for(LL x = 1; x <= sn; x++) f[x] +=
        max(0ll, pre[0][upp[x]-1]-pre[0][l[x]])+
        -3*max(0ll, pre[1][upp[x]-1]-pre[1][l[x]])+
        +3*max(0ll, pre[2][upp[x]-1]-pre[2][l[x]]);
    //printf("f ");for(int x=1;x<=sn;x++)printf("%5u ",f[x]-1);puts("");
    for(int x = sn; x >= 1; x--) f[x] -= f[x-1];
}
LL solve()
{
    lim = sn = pn = 0;
    while((lim+1)*(lim+1) <= n) ++lim;
    for(LL x = 1, y; x <= n; x = y) s[++sn] = (y=n/(n/x))++;
    while(p[pn+1] <= lim) ++pn;
    for(int x=1;x<=pn;x++)
    {
        LL t=1;
        for(int y=0;y<=gn;y++)
            pre[y][x]=pre[y][x-1]+t,t*=p[x];
    }
    for(int x = 1, y = 1; x <= sn; x++) {
        while(y <= pn && p[y] <= s[x]) y++;
        upp[x] = y;
    }
//    printf("s ");for(int x=1;x<=sn;x++)printf("%5d ",s[x]);puts("");
//    printf("p ");for(int x=1;x<=pn;x++)printf("%d ",p[x]);puts("");
//    printf("p[upp] ");for(int x=1;x<=sn;x++)printf("%d ",p[upp[x]]);puts("");
    calcg(), calcf();LL ret = 0;
    for(int x = 1; x <= sn; x++) ret += f[x]*g[0][sn-x+1];
    return ret;
}
int main()
{
    freopen("in.txt", "r", stdin);
    //freopen("inlay.in", "r", stdin);
    //freopen("out.txt", "w", stdout);
    //::iterator iter;                  %I64d
    //for(int x=1;x<=n;x++)
    //for(int y=1;y<=n;y++)
    //scanf("%d",&a);
    //printf("%d\n",ans);
    int T;
    scanf("%d",&T);
    euler(maxn);
    while(T--)
    {
        scanf("%lld",&n);
        printf("%lld\n",solve());
    }
    return 0;
}
