const int maxn =3100000;
LL sphi[maxn];
LL phi[maxn],prime[maxn],siz;      //线性筛素数，欧拉函数
bool mark[maxn];        //mark为0时为素数
map<LL,LL>h;
LL getphi(LL N)
{
  mem(mark);
  LL tot=0,i,j;
  phi[1]=mark[0]=mark[1]=1;
  for(i=2;i<=N;i++)//相当于分解质因式的逆过程
  {
     if(mark[i]==0){
         prime[tot++]=i;//筛素数的时候首先会判断i是否是素数。
         phi[i]=i-1;//当 i 是素数时 phi[i]=i-1
         }
     for(j=0;j<tot&&i*prime[j]<=N;j++)
     {
       mark[i*prime[j]]=1;//确定i*prime[j]不是素数
       if(i%prime[j]==0)//接着我们会看prime[j]是否是i的约数
       {
         phi[i*prime[j]]=phi[i]*prime[j];break;
       }
       else  phi[i*prime[j]]=phi[i]*(prime[j]-1);//其实这里prime[j]-1就是phi[prime[j]]，利用了欧拉函数的积性
     }
  }
  return tot;
}
LL sumphi(LL n)
{
    if(n<=siz)return sphi[n];
    if(h.find(n)!=h.end())return h[n];
    LL ans=n%MOD*((n+1)%MOD)%MOD*500000004ll%MOD;
    LL y;
    for(LL x=2;x<=n;x++)
    {
        y=n/(n/x);
        ans=(ans-sumphi(n/x)*(y-x+1))%MOD;
        x=y;
    }
    ans=(ans%MOD+MOD)%MOD;
    h[n]=ans;
    return ans;
}



	LL n;
    scanf("%I64d",&n);
    h.clear();
    siz=maxn-1000;
    getphi(siz);
    sphi[0]=0;
    for(LL x=1;x<=siz;x++)
        sphi[x]=(phi[x]+sphi[x-1])%MOD;
    printf("%I64d\n",sumphi(n));
******************************************
const int maxn =7100000;		//大小注意
int smu[maxn],siz;
map<LL,LL>h;
int mu[maxn],prime[maxn];      //线性筛素数，莫比乌斯函数
bool mark[maxn];        //mark为0时为素数
LL getmu(LL N)
{
  mem(mark);
  LL tot=0,i,j;
  mu[1]=mark[0]=mark[1]=1;
  for(i=2;i<=N;i++)//相当于分解质因式的逆过程
  {
     if(!mark[i]){
         prime[tot++]=i;//筛素数的时候首先会判断i是否是素数。
         mu[i]=-1;//当 i 是素数时 phi[i]=i-1
         }
     for(j=0;j<tot;j++)
     {
       if(i*prime[j]>N) break;
       mark[i*prime[j]]=1;//确定i*prime[j]不是素数
       if(!(i%prime[j]))//接着我们会看prime[j]是否是i的约数
       {
         mu[i*prime[j]]=0;break;
       }
       else  mu[i*prime[j]]=-mu[i];//其实这里prime[j]-1就是phi[prime[j]]，利用了欧拉函数的积性
     }
  }
  return tot;
}
LL summu(LL n)
{
    if(n<=siz)return smu[n];
    if(h.find(n)!=h.end())return h[n];
    LL ans=1;
    LL y;
    for(LL x=2;x<=n;x++)
    {
        y=n/(n/x);
        ans-=summu(n/x)*(y-x+1);
        x=y;
    }
    h[n]=ans;
    return ans;
}

    LL a,b;
    scanf("%I64d%I64d",&a,&b);
    h.clear();
    siz=maxn-1000;
    getmu(siz);
    smu[0]=0;
    for(LL x=1;x<=siz;x++)
        smu[x]=mu[x]+smu[x-1];
    printf("%I64d\n",summu(b)-summu(a-1));