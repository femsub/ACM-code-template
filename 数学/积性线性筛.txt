LL multcount(LL n) {
	if(n <= 0)return 0;
	const int v = static_cast<int>(sqrtl(n));
	std::vector<LL> scnt(v + 1), lcnt(v + 1);//2-n,f(p)=1,sump[i;n/i]
	std::vector<int> primes;
	for (int i = 1; i <= v; ++i) {
		scnt[i] = i - 1;
		lcnt[i] = n / i - 1;
	}
	for (int p = 2; p <= v; ++p) {
		if (scnt[p] == scnt[p - 1]) continue;
		primes.push_back(p);
		const LL pcnt = scnt[p - 1];
		const LL q = (LL)p * p;
		const int ed = std::min<LL>(v, n / q);
		for (int i = 1, w = v / p; i <= w; ++i) {
			lcnt[i] -= lcnt[i * p] - pcnt;//(s[i / p] - s[p - 1])*f(p){p^d+..+1}拆成完全积性
		}
		for (int i = v / p + 1; i <= ed; ++i) {
			lcnt[i] -= scnt[(n / p) / i] - pcnt;
		}
		for (int i = v; i >= q; --i) {
			scnt[i] -= scnt[i / p] - pcnt;
		}
	}
	primes.push_back(v + 1);
	//rec( 上界，质数下标，f(m') )=sumf(x),2-n;枚举最大质因子，次数是否>1
	std::function<LL(LL, int, LL)> rec = [&](LL rest, int last, LL mul) {
		LL t = (rest > v ? lcnt[n / rest] : scnt[rest]) - scnt[primes[last] - 1];//(p,n/m]sump
		LL ret = mul * t * 4;
		for (int i = last; i < int(primes.size()); ++i) {
			int p = primes[i];
			if (1ll * p * p > rest) break;
			for (LL q = p, nrest = rest, nmul = mul * 4; q * p <= rest; q *= p) {//nmul f(p^1).f(p^2)
				ret += rec(nrest /= p, i + 1, nmul);
				nmul += mul * 3;
				ret += nmul;
			}
		}
		return ret;
	};
	LL ret = 1;
	if (n > 1) ret += rec(n, 0, 1);
	return ret;
}


*************
LL multcount(LL n) {
	if(n <= 0)return 0;
	const int v = static_cast<int>(sqrtl(n));
	std::function<void(LL&, LL)>update = [&](LL & a, LL b) {
		a += b;
		while(a >= MOD)a -= MOD;
		while(a < 0)a += MOD;
	};
	std::vector<LL> scnt(v + 1), lcnt(v + 1);//2-n,f(p)=1,sump[i;n/i]
	std::vector<LL> ssum(v + 1), lsum(v + 1);
	std::vector<int> primes;
	for (int i = 1; i <= v; ++i) {
		scnt[i] = i - 1;
		lcnt[i] = (n / i - 1) % MOD;
		ssum[i] = (1ll * (1 + i) * i / 2 - 1) % MOD;
		lsum[i] = (1ll * (1 + n / i) % MOD * ((n / i) % MOD) / 2 + MOD - 1) % MOD;
	}
	for (int p = 2; p <= v; ++p) {
		if (scnt[p] == scnt[p - 1]) continue;
		primes.push_back(p);
		const LL pcnt = scnt[p - 1];
		const LL psum = ssum[p - 1];
		const LL q = 1ll * p * p;
		const int ed = std::min<LL>(v, n / q);
		for (int i = 1, w = v / p; i <= w; ++i) {//(s[i / p] - s[p - 1])*f(p){p^d+..+1}拆成完全积性
			update(lcnt[i], -(lcnt[i * p] - pcnt));
			update(lsum[i], -((lsum[i * p] - psum) * p) % MOD);
		}
		for (int i = v / p + 1; i <= ed; ++i) {
			update(lcnt[i], -(scnt[(n / p) / i] - pcnt));
			update(lsum[i], -((ssum[(n / p) / i] - psum) * p) % MOD);
		}
		for (int i = v; i >= q; --i) {
			update(scnt[i], -(scnt[i / p] - pcnt));
			update(ssum[i], -((ssum[i / p] - psum) * p) % MOD);
		}
	}
	primes.push_back(v + 1);
	//rec( 上界，质数下标，f(m') )=sumf(x),2-n;枚举最大质因子，次数是否>1
	std::function<LL(LL, int, LL)> rec = [&](LL rest, int last, LL mul) {
		LL t = (rest > v ? lcnt[n / rest] : scnt[rest]) - scnt[primes[last] - 1];//(p,n/m]sump
		LL t1 = (rest > v ? lsum[n / rest] : ssum[rest]) - ssum[primes[last] - 1];
		LL ret = mul * (t1 - t) % MOD;
		for (int i = last; i < int(primes.size()); ++i) {
			int p = primes[i];
			if (1ll * p * p > rest) break;
			for (LL q = p, nrest = rest, nmul = mul * (p - 1); q * p <= rest; q *= p) {//nmul f(p^1).f(p^2)
				update(ret, rec(nrest /= p, i + 1, nmul));
				nmul *= p;
				update(ret, nmul % MOD);
			}
		}
		return ret;
	};
	LL ret = 1;
	if (n > 1)
		update(ret, rec(n, 0, 1));
	return ret;
}
