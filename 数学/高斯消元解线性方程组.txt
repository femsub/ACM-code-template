typedef long long ll;
const int N = 1e0+10;
int change_num=0;
double **ans,a[N];
//这个函数是用来显示矩阵（主要是用来调试使用的）
void display(double **l_array,int r_size1,int r_size2){  
    for(int i=0; i<r_size1; i++)
        for(int j=0; j<r_size2; j++){

            if(j!=0)cout<<setprecision(4)<<setiosflags(ios_base::left)<<setw(7)<<l_array[i][j];
            else cout<<setprecision(4)<<setiosflags(ios_base::left)<<l_array[i][j]<<"       ";
            if(j+1==r_size2) cout<<endl;
        }
    cout<<resetiosflags(ios_base::left);
}
//这个下面的是算出上三角形
bool Change(double **&array,int r_size,int c_size){
    int  k=0;
    double max=array[k][k];
    int num=0;
    bool flag=false;
    while(k<r_size){                       //k表示现在在哪一行
        max=array[k][k];
        for(int i=k; i<r_size; i++){
            if(array[i][k]>max){
                flag=true;
                max=array[i][k];
                num=i;                    //num表示最大行的行数
            }
        }
        if(!flag)
			num=k;
        if(max==0)                      //如果一个列中的最大数是0的话那就说明这个矩阵的奇异矩阵
			return false;
        else if(k!=num){
            double temp=0;
            for(int i=0; i<c_size; i++){
                temp=array[k][i];
                array[k][i]=array[num][i];
                array[num][i]=temp;
                change_num++;
            }
        }
        for(int i=k; i<r_size-1; i++){
            double temp=array[i+1][k];          //这里的temp一定要保存的，因为直接使用array[i+1][k]，在下面的计算中会改变
            for(int j=k; j<c_size; j++)
				array[i+1][j]-=((temp/array[k][k])*array[k][j]);
        }
        k++;
        flag=false;
    }
    return true;
}
double Rowlay(double **&array,int r_size, int c_size ){   // 求行列式
    double sum=1;
    for(int i=0; i<r_size; i++)
		sum*=array[i][i];
    return sum;
}
void  Equation(double **&array,int r_size, int c_size){  //求方程组解
    for(int i=0; i<r_size; i++){
        double temp1=array[i][i];
        for(int j=i; j<c_size; j++)
			array[i][j]/=temp1;
    }
    for(int i=1; i<r_size; i++){
        for(int j=i-1; j>=0; j--){
            double temp2=array[j][i];
            for(int h=i; h<c_size; h++)
                array[j][h]-=(temp2*array[i][h]);
        }
    }
}