#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
const int INF = 0x7fffffff;
const int N = 102, M = N*N/2;
int C[N][N], D[N];
int x[M], y[M], l[M], r;
int necessary_flow, steady_flow, max_flow;
int n, m, s, t, ans;
 
 
 
 
void bfs(){
    int Q[N], head, tail;
    memset(D, -1, sizeof(D));
    head = 0; tail = 1; Q[0] = s; D[s] = 0;
 
    int u, v;
    while (head<tail){
        u = Q[head];
        for (v=1;v<=n;v++){
            if (D[v]==-1 && C[u][v]!=0){
                Q[tail] = v; D[v] = D[u] + 1;
                if (v == t) return;
                tail++;
            }
        }
        head++;
    }
}
 
 
void dinitz(){
    max_flow = 0;
 
    bfs();
    while (D[t]!=-1){
        int stack[n+1], cur[n+1], top = 0;
        for (int i=0;i<=n;i++) cur[i] = 1;
        stack[0] = s;
 
        int u, v;
        while (top!=-1){
            u = stack[top];
 
            if (u == t){
                int delta = INF, handle;
                for (int i=0;i<top;i++){
                    u = stack[i]; v = stack[i+1];
                    if (C[u][v] < delta){
                        delta = C[u][v];
                        handle = i;
                    }
                }
                max_flow += delta;
                for (int i=0;i<top;i++){
                    u = stack[i]; v = stack[i+1];
                    C[u][v] -= delta; C[v][u] += delta;
                }
                top = handle;
                continue;
            }
 
            for (v=cur[u];v<=n;v++)
                if (D[u] + 1 == D[v] && C[u][v]!=0) break;
 
 
            if (v>n) D[u] = -1, top--;
            else {
                cur[u] = v + 1;
                stack[++top] = v;
            }
        }
        bfs();
    }
}
 
void recover(){
    s = 0; t = n; C[s][1] = -ans; dinitz();
    ans = 0;
}
 
void init(){
    memset(C, 0, sizeof(C));
    n++; necessary_flow = 0;
    for (int i=0;i<m;i++){
        scanf("%d%d%d%d", &x[i], &y[i], &r, &l[i]);
        				//下界l[i],上界r
        C[x[i]][y[i]] += r - l[i];
        C[0][y[i]] += l[i];
        C[x[i]][n] += l[i];
        necessary_flow += l[i];
    }
    steady_flow = 0;
    C[n-1][1] = INF;
}
 
 
int main(){
    while (cin >> n >> m){
        init(); s = 0; t = n; dinitz();
        if (max_flow!=necessary_flow) printf("Impossible\n");
        else {
            steady_flow = C[1][--n];
            s = n; t = 1; C[n][1] = C[1][n] = 0; dinitz();
            ans = steady_flow - max_flow;
            if (ans < 0) recover(); // T T
            cout << ans << endl;
            for (int i=0;i<m;i++)
                printf("%d ", C[y[i]][x[i]]  + l[i]);//每条边流量
        }
    }
}

***************************************************
1、无源汇有上下界最大流

题目大意：给n个点，及m根pipe，每根pipe用来流躺液体的，单向的，每时每刻每根pipe流进来的物质要等于流出去的物质，要使得m条pipe组成一个循环体，里面流躺物质。并且满足每根pipe一定的流量限制，范围为[Li,Ri].即要满足每时刻流进来的不能超过Ri(最大流问题)，同时最小不能低于Li。

解题思路：O（-1）。

 

 建图模型： 以前写的最大流默认的下界为0，而这里的下界却不为0，所以我们要进行再构造让每条边的下界为0，这样做是为了方便处理。对于每根管子有一个上界容量up和一个下界容量low，我们让这根管子的容量下界变为0，上界为up-low。可是这样做了的话流量就不守恒了，为了再次满足流量守恒，即每个节点"入流=出流”，我们增设一个超级源点st和一个超级终点sd。我们开设一个数组du[]来记录每个节点的流量情况。

du[i]=in[i]（i节点所有入流下界之和）-out[i]（i节点所有出流下界之和）。

当du[i]大于0的时候，st到i连一条流量为du[i]的边。

当du[i]小于0的时候，i到sd连一条流量为-du[i]的边。

最后对（st，sd）求一次最大流即可，当所有附加边全部满流时（即maxflow==所有du[]>0之和），有可行解。

****************************************
2、有源汇有上下界的最大流

建图模型：源点s，终点d。超级源点ss，超级终点dd。首先判断是否存在满足所有边上下界的可行流，方法可以转化成无源汇有上下界的可行流问题。怎么转换呢？

增设一条从d到s没有下界容量为无穷的边，那么原图就变成了一个无源汇的循环流图。接下来的事情一样，超级源点ss连i（du[i]>0），i连超级汇点（du[i]<0）,

对（ss，dd）进行一次最大流，当maxflow等于所有(du[]>0)之和时，有可行流，否则没有。

当有可行流时，删除超级源点ss和超级终点dd，再对（s，d）进行一次最大流，此时得到的maxflow则为题目的解。为什么呢？因为第一次maxflow（）只是求得所有满足下界的流量，而残留网络（s，d）路上还有许多自由流（没有和超级源点和超级汇点连接的边）没有流满，所有最终得到的maxflow=（第一次流满下界的流+第二次能流通的自由流）。
***********************************
3、有源汇有上下界的最小流

解题思路：

   1、du[i]表示i节点的入流之和与出流之和的差。 

   2、增设超级源点st和超级汇点sd，连（st，du[i]（为正）），（-du[i]（为负），sd）。 ///增设超级源点和超级汇点，因为网络中规定不能有弧指向st，也不能有流量流出sd

   3、做一次maxflow（）。

   4、源点（Sd）和起点（St）连一条容量为oo的边。

   5、再做一次maxflow（）。

   6、当且仅当所有附加弧满载时有可行流，最后答案为flow[（Sd->St）^1]，St到Sd最大流就是Sd到St最小流。

 

建图模型：同样转换成先求无源汇有上下界的可行流，先添加一条d到s容量为无穷的边，这里求最小流很容易让人产生歧路，为什么呢？当所有边满足下界条件并且能量守恒时，这时候求得的最大流不就是最小流么。这样是错误了，我开始了在这揣测了良久。
*********************************
有下界 有源汇 最小费用可行流
s t 源汇 S T 超级源汇

addedge(t,s,inf,0);
有源有汇的图，终点连一条边到起点，容量为INF，变成无源无汇

//必须满流的边(u,v,w)：建立超源S，超汇T，连接(S,v,w),(u,T,w),流量平衡就行

x->y b下界
addedge(S,y,b,z); 代表这条边至少走b次

addedge(x,y,inf,z);表这条边除了至少走的一次之外还可以随便走 

addedge(x,T,inf,0);代表这个点随时结束

addedge(x,1,inf,0);代表这个点可以随时回到1点