int Prim()
{
    int dis[N],ans = 0;           //生成树当前的最小花费，最终的最小花费，dis为未选点到已选点
					//的最短距离，已选置为-1
    for(int i = 1;i <= n;++i)
    {    //初始化
       dis[i] = graph[1][i];
    }
    for(int i = 2;i <= n;++i)
    {    //N个顶点要连通只须n-1条边
        int tem = 1,m = INF;
        for(int j = 2;j <= n;++j)
	{ 				//根据贪心，找出当前最短的一条边
           if(dis[j] != -1&&dis[j] < m)
           {
		m = dis[j];
		tem=j;
	    }
        }
        ans += m;
        dis[tem] = -1;                //改点已经使用过，不可能在出现更小的情况
        for(int j = 2;j <= n;++j)
	{
           if((dis[j]!=-1)&&(dis[j] > graph[tem][j]))  //更新点（当前j点的最短距离，跟从tem到j那个更小）//用邻接矩阵，只更新tem的点，同时记录最短边
              dis[j] = graph[tem][j];
        }
    }
    return ans;
}