const int __maxNodes=2100;
vector<int> G[__maxNodes]; /* G[i] 存储顶点 i 出发的边的编号 */
typedef vector<int>::iterator iterator_t;
int matching[__maxNodes]; /* 存储求解结果 */
int check[__maxNodes];
int mark;
void init(int n)
{
	mark=0;
	memset(matching,0,n*sizeof(int));
	for(int x=0;x<n;x++)G[x].clear();
}
void addedge(int u,int v)
{
	G[u].push_back(v);
	G[v].push_back(u);
}
bool dfs(int u)
{
    for(int v:G[u]){
        if (check[v]!=mark) {     // 要求不在交替路中
            check[v] = mark; // 放入交替路
            if (matching[v] == 0 || dfs(matching[v])) {
                // 如果是未盖点，说明交替路为增广路，则交换路径，并返回成功
                matching[v] = u;
                matching[u] = v;
                return true;
            }
        }
    }
    return false; // 不存在增广路，返回失败
}
void match(int n)
{
	for(int x=1;x<=n;x++)
		dfs(mark=x);
}





最大匹配数：最大匹配的匹配边的数目

最小点覆盖数：选取最少的点，使任意一条边至少有一个端点被选择

最大独立数：选取最多的点，使任意所选两点均不相连

最小路径覆盖数：对于一个 DAG（有向无环图），选取最少条路径，使得每个顶点属于且仅属于一条路径。路径长可以为 0（即单个点）。

定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）

定理2：最大匹配数 = 最大独立数

定理3：最小路径覆盖数 = 顶点数 - 最大匹配数


对于一个有向无环图，其最小简单路径覆盖就是等于节点数减去二分图的最大匹配数，对于每条弧，弧头作为X部，弧尾作为Y部。最后在求得最大匹配的基础上，没有被匹配的Y部的点就是简单路径的起点。其个数刚好就是节点数减去二分图的最大匹配数