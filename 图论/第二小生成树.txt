//#include <bits/stdc++.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <string>
using namespace std;
double esp=1e-11;
#pragma comment(linker, "/STACK:1024000000,1024000000")
#define fi first
#define se second
#define all(a) (a).begin(),(a).end()
#define cle(a) while(!a.empty())a.pop()
#define mem(p) memset(p,0,sizeof(p))
#define memf(p) memset(p,0x3f,sizeof(p))
#define memn(p) memset(p,-1,sizeof(p))
#define mp(A, B) make_pair(A, B)
#define pb push_back
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
typedef long long int LL;
const double PI = acos(-1.0);
const LL INF=0x3f3f3f3f3f3f3f3f;
const LL MOD = 1000000007;
const int maxn =50010;
int fa[maxn];
struct edge
{
        int u;
        int v;
        int w;
        int mark;
        bool operator<(const edge e)
        {
                return w<e.w;
        };
}edges[maxn];
int get_father(int u)
{
        if(u==fa[u])
                return u;
        fa[u]=get_father(fa[u]);
        return fa[u];
}
void link(int u,int v)
{
        fa[get_father(u)]=get_father(v);
}
vector<int> node[510];
int ed[510][510];
void add(int i)
{
    edges[i].mark=-1;               //printf("%d\n",i);
    node[edges[i].u].pb(edges[i].v);
    node[edges[i].v].pb(edges[i].u);
}
int kruskal(int n,int e)
{
        int sum=0,num=0,u,v;
        sort(edges,edges+e);
        for(int i=0;i<e;i++)
        {
                u=edges[i].u;
                v=edges[i].v;
                if(get_father(u)!=get_father(v))
                {
                        add(i);//加入结果
                        sum+=edges[i].w;
                        num++;
                        link(u,v);
                }
                if(num>=n-1)
                        break;
        }
        return sum;
}
int deep[510];
void dfs(int u,int f,int d)
{
    fa[u]=f;
    deep[u]=d;
    int len=node[u].size();
    for(int x=0;x<len;x++)
        if(node[u][x]!=f)
            dfs(node[u][x],u,d+1);
}
int qu(int u,int v)
{
    int ma=0;
    while(deep[u]!=deep[v])
    {
        if(deep[v]>deep[u])
            swap(u,v);
        if(ed[u][fa[u]]>ma)
        {
            ma=ed[u][fa[u]];
        }
        u=fa[u];
    }
    while(u!=v)
    {
        if(ed[u][fa[u]]>ma)
        {
            ma=ed[u][fa[u]];
        }
        if(ed[v][fa[v]]>ma)
        {
            ma=ed[v][fa[v]];
        }
        u=fa[u];
        v=fa[v];
    }
    return ma;
}
int makk[510][510];
void mak(int u,int v,int ma)
{
    while(deep[u]!=deep[v])
    {
        if(deep[v]>deep[u])
            swap(u,v);
        if(ed[u][fa[u]]==ma)
        {
            makk[u][fa[u]]=makk[fa[u]][u]=1;
        }
        u=fa[u];
    }
    while(u!=v)
    {
        if(ed[u][fa[u]]==ma)
        {
            makk[u][fa[u]]=makk[fa[u]][u]=1;
        }
        if(ed[v][fa[v]]==ma)
        {
            makk[v][fa[v]]=makk[fa[v]][v]=1;
        }
        u=fa[u];
        v=fa[v];
    }
}
int main()
{
        //freopen("in.txt", "r", stdin);
        //freopen("kebab.in", "r", stdin);
        //freopen("kebab.out", "w", stdout);
        //map<long long int,int>ma;                 %I64d
        //vector<int>::iterator iter;
        //memset(m,0,sizeof(int));               for(iter=trtr[rt].begin();iter!=trtr[rt].end();iter++)
        //for(int x=1;x<=n;x++)
        //for(int y=1;y<=n;y++)
        //scanf("%d%d",&a,&b);
        //scanf("%d",&n);
        //printf("%d\n",ans);
        int n,m;
        scanf("%d%d",&n,&m);
        int u,v,w;
        for(int x=0;x<n;x++)
            node[x].clear();
        for(int x=0;x<=n;x++)
            fa[x]=x;
        memf(ed);
        mem(makk);
        for(int x=0;x<m;x++)
        {
            scanf("%d%d%d",&edges[x].u,&edges[x].v,&edges[x].w);
            ed[edges[x].u][edges[x].v]=ed[edges[x].v][edges[x].u]=edges[x].w;
            edges[x].mark=0;
        }
        int ans=kruskal(n,m);           //for(int x=0;x<m;x++)printf("%d %d %d %d\n",edges[x].u,edges[x].v,edges[x].w,edges[x].mark);
        dfs(1,-1,0);
        int tem;
        for(int x=0;x<m;x++)
        {
            if(edges[x].mark==0)
            {
                tem=qu(edges[x].u,edges[x].v);
                if(tem==edges[x].w)
                {
                    mak(edges[x].u,edges[x].v,tem);
                }
            }

        }
        int h;                  //for(int x=0;x<m;x++)printf("%d %d %d %d\n",edges[x].u,edges[x].v,edges[x].w,edges[x].mark);
        h=ans=0;
        for(int x=0;x<m;x++)
            if(edges[x].mark==-1&&makk[edges[x].u][edges[x].v]!=1)
            {
                h++;
                ans+=edges[x].w;
            }
        printf("%d %d\n",h,ans);
        return 0;
}
