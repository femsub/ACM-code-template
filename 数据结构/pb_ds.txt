#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template < class Node_CItr , class Node_Itr , class Cmp_Fn , class _Alloc>
struct MyUpdate{
	virtual Node_CItr node_begin() const = 0;
	virtual Node_CItr node_end() const = 0;
	typedef long long metadata_type;
	inline void operator()(Node_Itr it , Node_CItr end_it){
		Node_Itr l = it.get_l_child(), r = it.get_r_child();
		long long res = 0;
		if(l != end_it) res += l.get_metadata();
		if(r != end_it) res += r.get_metadata();
		const_cast <metadata_type &>(it.get_metadata()) = res + (*it)->second;
	}
	inline long long PrefixSum( int x ){
		long long ret = 0;
		Node_CItr it = node_begin();
		while( it != node_end() ){
			Node_CItr l = it.get_l_child() , r = it.get_r_child();
			if(Cmp_Fn()(x,(*it)->first)) it=l;
			else{
				ret += (*it)->second;
				if( l != node_end() ) ret += l.get_metadata();
				it = r;
			}
		}
		return ret;
	}
};
tree < int , long long , less < int > , rb_tree_tag , MyUpdate > tr;
tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> tr;




/*null_mapped_type 旧版本
key,mapped metadata是维护值
tr.node_begin().get_metadata() 返回这棵树的总维护值
a.join(b);  ab两棵树不相交,合并后b清空
a.split(key,b);   a中小于等于key的在a,其他在b,b中原有元素的清空
begin(),end(),size(),empty(),clear(),find(),lower_bound(),upper_bound(),erase(),insert(),[]

tree_order_statistics_node_update: get_metadata维护的是size_t
.find_by_order(k) 返回第k小的迭代器，0-base
.order_of_key(key) 返回key的rank=小于key的个数
*/