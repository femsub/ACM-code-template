
int root[maxn],cnt;
struct node{int l,r,sum;}tr[maxn*10];
void update(int l,int r,int x,int &y,int pos)       //(l,r,root[x],root[x+1],pos)
{
    tr[++cnt]=tr[x],tr[cnt].sum++,y=cnt;
    if(l==r)return;
    int mid=(l+r)/2;
    if(mid>=pos)update(l,mid,tr[x].l,tr[y].l,pos);
    else update(mid+1,r,tr[x].r,tr[y].r,pos);
}
int query(int l,int r,int x,int y,int k)
{
    if(l==r)return l;
    int mid=(l+r)/2;
    int sum=tr[tr[y].l].sum-tr[tr[x].l].sum;
    if(sum>=k)return query(l,mid,tr[x].l,tr[y].l,k);
    else return query(mid+1,r,tr[x].r,tr[y].r,k-sum);
}

*****************************
区间出现的数

考虑离线，从左到右插入线段树中，当扫到位置X的时候，线段树上的每个点表示区间[i,x]的答案，之后考虑加一个数的影响，记录下pre[]，即之前出现的位置，就是个区间更新的傻逼题了

bit套权值线段树 ，暴力建树，nloglog