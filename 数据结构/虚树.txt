//#include <bits/stdc++.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <string>
using namespace std;
double esp=1e-11;
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#define fi first
#define se second
#define all(a) (a).begin(),(a).end()
#define cle(a) while(!a.empty())a.pop()
#define mem(p) memset(p,0,sizeof(p))
#define memf(p) memset(p,0x3f,sizeof(p))
#define memn(p) memset(p,-1,sizeof(p))
#define mp(A, B) make_pair(A, B)
#define pb push_back
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
typedef long long int LL;
const double PI = acos(-1.0);
const LL INF=0x3f3f3f3f;
const LL MOD = 1000000009;
const int maxn =250010;
vector<pair<int,int> >nodo[maxn],so;
vector<int>node[maxn];
int fa[maxn][20],dep[maxn],dfn[maxn],tot=0;
stack<int>stk;
void dfs1(int u,int f)
{
    int len=nodo[u].size();
    dfn[u]=++tot;
    for(int x=0;x<len;x++)
        if(nodo[u][x].fi!=f)
        {
            dep[nodo[u][x].fi]=dep[u]+1;
            fa[nodo[u][x].fi][0]=u;
            for(int y=1;y<=19;y++)
            {
                fa[nodo[u][x].fi][y]=fa[fa[nodo[u][x].fi][y-1]][y-1];
            }
            dfs1(nodo[u][x].fi,u);
        }
}
int lca(int u,int v)
{
    if(dep[u]<dep[v])swap(u,v);
    for(int x=19;x>=0;x--)
        if(dep[fa[u][x]]>=dep[v])
            u=fa[u][x];
    if(u==v)return u;
    for(int x=19;x>=0;x--)
        if(fa[u][x]!=fa[v][x])
        {
            u=fa[u][x];
            v=fa[v][x];
        }
    return fa[u][0];
}
int main()
{
	int n;
	tot=0;
	scanf("%d",&n);
	for(int x=1;x<=n;x++)
		nodo[x].clear(),node[x].clear();        //oldÍ¼
	mem(fa);
	cle(stk);
	int u,v,root;
	for(int x=1;x<=n;x++)
	{
		scanf("%d",&u);
		if(u==-1){root=x;continue;}
		nodo[u].pb(mp(x,1));
		nodo[x].pb(mp(u,1));
	}
	dep[0]=0;
	dep[root]=1;
	dfs1(root,0);
	int k,m,tem;
	LL ans=0;
	scanf("%d",&m);
	while(m--)
	{
		scanf("%d",&k);
		so.clear();
		for(int x=1;x<=k;x++)
		{
			scanf("%d",&u);
			so.pb(mp(dfn[u],u));
		}
		sort(all(so));
		cle(stk);
		stk.push(root);
		for(int x=0;x<k;x++)
		{
			if(so[x].se==root)continue;
			v=lca(stk.top(),so[x].se);
			if(v!=stk.top())
			{
				tem=stk.top();
				stk.pop();
				while(dep[stk.top()]>dep[v])
				{
					node[tem].pb(stk.top());
					node[stk.top()].pb(tem);
					tem=stk.top();
					stk.pop();
				}
				if(v!=stk.top())
				{
					stk.push(v);
					node[tem].pb(v);
					node[v].pb(tem);
				}
				stk.push(so[x].se);
			}
			else
				stk.push(so[x].se);

		}
		if(stk.size()>1)
		{
			tem=stk.top();
			stk.pop();
			while(tem!=root)
			{
				node[tem].pb(stk.top());
				node[stk.top()].pb(tem);
				tem=stk.top();
				stk.pop();
			}
		}
		printf("%lld\n",ans+1);
	}
	return 0;
}
