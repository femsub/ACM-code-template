find(a, b)   //a,b之间最大值
insert(a, b, c);//建树
update(1, 1, z, w[d[a][1]], b)  //更新w[d[a][1]]，权值为b，z为总点数


记f1 = top[u]，f2 = top[v]。
    当f1 <> f2时：不妨设dep[f1] >= dep[f2]，那么就更新u到f1的父边的权值(logn)，并使u = fa[f1]。
    当f1 = f2时：u与v在同一条重链上，若u与v不是同一点，就更新u到v路径上的边的权值(logn)，否则修改完成；






struct treepo{
        static const int MAXN = 10050;
        struct Edge
        {
            int to,next;
        }edge[MAXN*2];
        int head[MAXN],tot;
        int top[MAXN];//top[v]表示v所在的重链的顶端节点
        int fa[MAXN]; //父亲节点
        int deep[MAXN];//深度
        int num[MAXN];//num[v]表示以v为根的子树的节点数
        int p[MAXN];//p[v]表示v与其父亲节点的连边在线段树中的位置
        int fp[MAXN];//和p数组相反           fp[p[u]] = u;
        int son[MAXN];//重儿子
        int pos;
        void init(int n)
        {
            tot = 0;
            memset(head,-1,sizeof(head));
            pos = 0;
            memset(son,-1,sizeof(son));
            tr.build(n-1);
        }
        void addedge(int u,int v)
        {
            edge[tot].to = v;edge[tot].next = head[u];head[u] = tot++;
            edge[tot].to = u;edge[tot].next = head[v];head[v] = tot++;
        }
        void dfs1(int u,int pre,int d) //第一遍dfs求出fa,deep,num,son  dfs1((n+1)/2,-1,0);
        {
            deep[u] = d;
            fa[u] = pre;
            num[u] = 1;
            for(int i = head[u];i != -1; i = edge[i].next)
            {
                int v = edge[i].to;
                if(v != pre)
                {
                    dfs1(v,u,d+1);
                    num[u] += num[v];
                    if(son[u] == -1 || num[v] > num[son[u]])
                        son[u] = v;
                }
            }
        }
        void dfs1(){dfs1((tr.n+1)/2,-1,0);}
        void getpos(int u,int sp) //第二遍dfs求出top和p  getpos((n+1)/2,(n+1)/2);
        {
            top[u] = sp;
            p[u] = pos++;
            fp[p[u]] = u;
            if(son[u] == -1) return;
            getpos(son[u],sp);
            for(int i = head[u] ; i != -1; i = edge[i].next)
            {
                int v = edge[i].to;
                if(v != son[u] && v != fa[u])
                    getpos(v,v);
            }
        }
        void getpos(){getpos((tr.n+1)/2,(tr.n+1)/2);}
        LL sumuv(int va,int vb)
        {
                int f1 = top[va], f2 = top[vb];
                LL tmp = 0;
             while (f1 != f2)
             {
                   if (deep[f1] < deep[f2])
                   { swap(f1, f2); swap(va, vb); }
                   tmp += tr.query(p[f1],p[va]);//max(tmp, maxi(1, 1, z, w[f1], w[va]));
                   va = fa[f1]; f1 = top[va];
             }
             if (va == vb) return tmp;
             if (deep[va] > deep[vb]) swap(va, vb);
             return tmp + tr.query(p[son[va]],p[vb]);//max(tmp, maxi(1, 1, z, w[son[va]], w[vb]));
        }
        int lenuv(int va,int vb)                        //u v长度
        {
                int len=0;
                int f1 = top[va], f2 = top[vb];
             while (f1 != f2)
             {
                   if (deep[f1] < deep[f2])
                   { swap(f1, f2); swap(va, vb); }
                   len += p[va]-p[f1]+1;
                   va = fa[f1]; f1 = top[va];
             }
             if (va != vb)
             {
                     if (deep[va] > deep[vb]) swap(va, vb);
                        len+=p[vb]-p[son[va]]+1;
             }
             return len;
        }
        int kth(int va,int vb,int k)		//	u到v第k个
        {
                if(k==1)
                        return va;
                int len=lenuv(va,vb);
             if(k-1==len)
                        return vb;

             int len1,len2;
             len1=len2=0;
             int f1 = top[va], f2 = top[vb];
             while (f1 != f2)
             {
                   if (deep[f1] < deep[f2])
                   {
                        if(len2+p[vb]-p[f2]+1>len-k+1)
                                return fp[p[vb]-len+k+len2-1];
                        else if(len2+p[vb]-p[f2]+1==len-k+1)
                                return fa[f2];
                           len2+=p[vb]-p[f2]+1;
                           vb = fa[f2]; f2 = top[vb];
                   }
                   else
                   {
                           if(len1+p[va]-p[f1]+1>k-1)
                                return fp[p[va]-k+len1+1];
                           else if(len1+p[va]-p[f1]+1==k-1)
                                return fa[f1];
                           len1+=p[va]-p[f1]+1;
                           va = fa[f1]; f1 = top[va];
                   }
             }
             if (va == vb) return va;
             if (deep[va] > deep[vb])
             {
                     if(len1+p[va]-p[son[vb]]+1==k-1)
                                return vb;
                     else
                                return fp[p[va]-k+len1+1];
             }
             else
             {
                     if(len2+p[vb]-p[son[va]]+1==len-k+1)
                                return va;
                        else
                                return fp[p[vb]-len+k+len2-1];
             }
        }
        /*********************/
        struct SegTree{
                int n;
                LL add[MAXN<<2];
                LL sum[MAXN<<2];
                void PushUp(int rt) {
                        sum[rt] = sum[rt<<1] + sum[rt<<1|1];
                }
                void PushDown(int rt,int m) {
                        if (add[rt]) {
                                add[rt<<1] += add[rt];
                                add[rt<<1|1] += add[rt];
                                sum[rt<<1] += add[rt] * (m - (m >> 1));
                                sum[rt<<1|1] += add[rt] * (m >> 1);
                                add[rt] = 0;
                        }
                }
                void build(int l,int r,int rt) {
                        add[rt] = 0;
                        sum[rt]	= 0;
                        if (l == r) {
                            //scanf("%lld",&sum[rt]);
                                return ;
                        }
                        int m = (l + r) >> 1;
                        build(lson);
                        build(rson);
                        PushUp(rt);
                }
                void build(int n)
                {
                        this->n=n;
                        build(1,n,1);
                }
                void update(int L,int R,int c,int l,int r,int rt) {
                        if (L <= l && r <= R) {
                                add[rt] += c;
                                sum[rt] += (LL)c * (r - l + 1);
                                return ;
                        }
                        PushDown(rt , r - l + 1);
                        int m = (l + r) >> 1;
                        if (L <= m) update(L , R , c , lson);
                        if (m < R) update(L , R , c , rson);
                        PushUp(rt);
                }
                //void update(int L,int R,int c){update(L,R,c,1,n,1);}
                LL query(int L,int R,int l,int r,int rt) {
                        if (L <= l && r <= R) {
                                return sum[rt];
                        }
                        PushDown(rt , r - l + 1);
                        int m = (l + r) >> 1;
                        LL ret = 0;
                        if (L <= m) ret += query(L , R , lson);
                        if (m < R) ret += query(L , R , rson);
                        return ret;
                }
                LL query(int L,int R){return query(L,R,1,n,1);}
        }tr;
}pt;




pt.init(n);
pt.addedge(u,v);	//已双向
pt.dfs1();
pt.getpos();


pt.update(u,v,w);	//u-v之间的边为w
pt.sumuv(u,v);
pt.kth(u,v,w);
pt.lenuv(u,v);

pair<int,int> lenfa(int va,int vb)                        
        {
                int len=0;
                int f1 = top[va], f2 = top[vb];
             while (f1 != f2)
             {
                   if (deep[f1] < deep[f2])
                   { swap(f1, f2); swap(va, vb); }
                   len += p[va]-p[f1]+1;
                   va = fa[f1]; f1 = top[va];
             }
             if (va != vb)
             {
                     if (deep[va] > deep[vb]) swap(va, vb);
                        len+=p[vb]-p[son[va]]+1;
             }
             return mp(va,len+1);
        }












