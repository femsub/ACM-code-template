vector<pair<int,int> >tr(maxn),num(maxn);
int deep[maxn],L[maxn],R[maxn],tot,sn;
void updp(int x,pair<int,int>p)
{
    if(x)
    while(x<=sn)
    {
	tr[x]=min(tr[x],p);
	x+=x&(-x);
    }
}
int lca(int u,int v)
{
    int l=L[u],r=L[v];
    if(l>r)swap(l,r);
    pair<int,int>ans = num[r];
    while(1)
    {
        ans = min(ans , num[r]);
        if(l == r) break;
        for(r -= 1;r-l >=(r&(-r));r -= (r&(-r)))
        {
            ans = min(ans , tr[r]);
        }
    }
    return ans.se;
}
void dfs(int u,int f)
{
    tot++;
    L[u]=tot;
    deep[u]=deep[f]+1;
    num[L[u]]=mp(deep[u],u);
    int len=node[u].size();
    for(int x=0;x<len;x++)
        if(node[u][x]!=f)
        {
            dfs(node[u][x],u);
            tot++;
            num[tot]=mp(deep[u],u);
        }
    R[u]=tot;
}

	sn=2*n+10;
        tot=0;
	deep[0]=0;
        dfs(1,0);
        for(int x=1;x<=tot;x++)
            updp(x,num[x]);

T=<V,E>，其中V={A,B,C,D,E,F,G},E={AB,AC,BD,BE,EF,EG},且A为树根。则图T的DFS结果为：A->B->D->B->E->F->E->G->E->B->A->C->A，要求D和G的最近公共祖先, 则LCA[T, D, G] = RMQ(L, R[D], R[G])= RMQ(L, 3, 8)，L中第4到7个元素的深度分别为：1,2,3,3，则深度最小的是B。