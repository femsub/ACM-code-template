void update(int x,int val)
{
    for (; x&&x<=N; x+=x&-x)
	tr[x]+=val;
}
int query(int x)
{
    int sum=0;
    for (; x; x^=x&-x)
	sum+=tr[x];
    return sum;
}
int query(int l,int r)   //询问[l,r]区间最大值  logn
{
    int ans = num[r];
    while(1)
    {
        ans = max(ans , num[r]);
        if(l == r) break;
        for(r--;r-l >=(r&-r);r ^= r&-r)
            ans = max(ans , tr[r]);
    }
    return ans;
}  

树状数组实现查找K小的元素

回顾树状数组的定义，注意到有如下两条性质：
一，c[ans]=sum of A[ans-lowbit(ans)+1 ... ans];
二，当ans=2^k时，
 c[ans]=sum of A[1 ... ans];
下面说明findK(k)如何运作：
1，设置边界条件ans,ans'<maxn且cnt<=k；
2，初始化cnt=c[ans]，其中ans=2^k且k为满足边界条件的最大整数；
3，找到满足边界条件的最大的ans'使得ans'-lowbit(ans')=ans，即ans'满足c[ans']=A[ans+1 .. ans']（根据性质一），只要将c[ans']累加到cnt中（此时cnt=sum of A[1 ... ans']，根据性质二），cnt便可以作为k的逼近值；
4，重复第3步直到cnt已无法再逼近k，此时ans刚好比解小1，返回ans+1。

其实这个算法就是将树状数组的求和反向........
因此findk(k)的实质就是二分逼近。

int find_Kth(int k)
{
	int idx = 0;
	for(int i=20; i>=0; i--)
	{
		idx |= 1 << i;
		if(idx <= N && tr[idx] < k)
			k -= tr[idx];
		else	idx ^= 1 << i;
	}
	return idx + 1;
}



+-相反 维护后缀