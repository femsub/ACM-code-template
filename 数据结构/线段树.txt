#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1

const int maxn = 100050;
struct SegTree{
        int n;
        LL add[maxn<<2];
        LL sum[maxn<<2];
        void PushUp(int rt) {
                sum[rt] = sum[rt<<1] + sum[rt<<1|1];
        }
        void PushDown(int rt,int m) {
                if (add[rt]) {
                        add[rt<<1] += add[rt];
                        add[rt<<1|1] += add[rt];
                        sum[rt<<1] += add[rt] * (m - (m >> 1));
                        sum[rt<<1|1] += add[rt] * (m >> 1);
                        add[rt] = 0;
                }
        }
        void build(int l,int r,int rt) {
                add[rt] = 0;
                sum[rt]	= 0;
                if (l == r) {
                    //scanf("%lld",&sum[rt]);
                        return ;
                }
                int m = (l + r) >> 1;
                build(lson);
                build(rson);
                PushUp(rt);
        }
        void build(int n)
        {
                this->n=n;
                build(1,n,1);
        }
        void update(int L,int R,int c,int l,int r,int rt) {
                if (L <= l && r <= R) {
                        add[rt] += c;
                        sum[rt] += (LL)c * (r - l + 1);
                        return ;
                }
                PushDown(rt , r - l + 1);
                int m = (l + r) >> 1;
                if (L <= m) update(L , R , c , lson);
                if (m < R) update(L , R , c , rson);
                PushUp(rt);
        }
        void update(int L,int R,int c){update(L,R,c,1,n,1);}
        LL query(int L,int R,int l,int r,int rt) {
                if (L <= l && r <= R) {
                        return sum[rt];
                }
                PushDown(rt , r - l + 1);
                int m = (l + r) >> 1;
                LL ret = 0;
                if (L <= m) ret += query(L , R , lson);
                if (m < R) ret += query(L , R , rson);
                return ret;
        }
        LL query(int L,int R){return query(L,R,1,n,1);}
}tr;




/*
tr.build(15);
tr.update(1,10,1);
tr.query(1,15);
lower_bound进行离散化
*/