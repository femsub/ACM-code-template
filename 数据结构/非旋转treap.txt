int cnt,root;
struct Treap{
    int l,r;
    int fix,key,size;
}tr[maxn];
inline void updata(int a){tr[a].size=1+tr[tr[a].l].size+tr[tr[a].r].size;}
inline int newtreap(int _val){++cnt;tr[cnt].l=tr[cnt].r=0;tr[cnt].fix=(rand()<<16)+rand();tr[cnt].key=_val;tr[cnt].size=1;return cnt;}
void init(){srand((int)time(0));root=cnt=0;tr[0].size=tr[0].l=tr[0].r=0;}
int Merge(int A,int B){//合并操作
    if(!A)return B;
    if(!B)return A;
    if(tr[A].fix<tr[B].fix){
        //tr[++cnt]=tr[A];A=cnt;
        tr[A].r=Merge(tr[A].r,B);
        updata(A);
        return A;
    }else{
        //tr[++cnt]=tr[B];B=cnt;
        tr[B].l=Merge(A,tr[B].l);
        updata(B);
        return B;
    }
}

pair<int,int> Split(int x,int k){//拆分操作
    if(!x)return mp(0,0);
    pair<int,int> y;
    //tr[++cnt]=tr[x];x=cnt;
    if(tr[tr[x].l].size>=k){
        y=Split(tr[x].l,k);
        tr[x].l=y.second;
        updata(x);
        y.second=x;
    }else{
        y=Split(tr[x].r,k-tr[tr[x].l].size-1);
        tr[x].r=y.first;
        updata(x);
        y.first=x;
    }
    return y;
}

int Findkth(int k,int& tree){//查找第K小
    pair<int,int> x=Split(tree,k-1);
    pair<int,int> y=Split(x.second,1);
    int ans=y.first;
    tree=Merge(Merge(x.first,ans),y.second);
    return tr[ans].key;
}

int Getkth(int key,int tree){//询问一个数key是第几大
    if(!tree)return 0;
    return key<tr[tree].key?Getkth(key,tr[tree].l):Getkth(key,tr[tree].r)+tr[tr[tree].l].size+1;
}
void Insert(int key,int& tree){//插入操作
    pair<int,int> x=Split(tree,Getkth(key-1,tree));
    tree=Merge(Merge(x.first,newtreap(key)),x.second);
}

void Delete(int key,int& tree){//删除key
    key=Getkth(key,tree);
    pair<int,int> x=Split(tree,key-1);
    pair<int,int> y=Split(x.second,1);
    tree=Merge(x.first,y.second);
}

/*
void Build(int *a){//建造操作		已经sort,a[0]为size
    static int stack[maxn],x,last;
    int p=0;
    for(int i=1;i<=a[0];++i){
        x=newtreap(a[i]);
        last=0;
        while(p && tr[stack[p]].fix>tr[x].fix){
            updata(stack[p]);
            last=stack[p];
            stack[p--]=0;
        }
        if(p) tr[stack[p]].r=x;
        tr[x].l=last;
        stack[++p]=x;
    }
    while(p) updata(stack[p--]);
    root=stack[1];
}

    int a[maxn];//a[0]为大小
    init();
    sort(a+1,a+1+a[0]);
    Build(a);
*/