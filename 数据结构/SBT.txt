struct node
{
	int key , size;
	node *c[2];
	node(int k)
	{
		key = k;
		size = 1;
	};
	void t(){size=c[0]->size+c[1]->size+1;}
};
class SBT
{
	private:
		node * root , * nil;
		inline void insert(node * &x , int & k)
		{
			if(x->size == 0)
			{
				x = new node(k);
				x->c[0] = nil;
				x->c[1] = nil;
			}else{
				bool l = k < x->key;
				x->size++;
				insert(x->c[l] , k);
				maintain(x , l);
			};
		};
		inline void rot(node * & x , bool l)
		{
			node * y = x->c[!l];
			x->c[!l] = y->c[l];
			y->c[l] = x;
			y->size = x->size;
			x->t();
			x = y;
		};
		inline void maintain(node * &x , bool l)
		{
			if(x->size == 0) return;
			if(x->c[l]->c[l]->size > x->c[!l]->size)
			{
				rot(x , !l);
			}else{
				if(x->c[l]->c[!l]->size > x->c[!l]->size)
				{
					rot(x->c[l] , l);
					rot(x , !l);
				}else{
					return;
				};
			};
			maintain(x->c[1] , 1);
			maintain(x->c[0] , 0);
			maintain(x , 1);
			maintain(x , 0);
		};
		inline bool del(node * &x , int & k)
		{
			if(x->size == 0)
			    return false;
			if(k == x->key)
			{
				node * y;
				if(x->c[0]->size == 0)
				{
					y = x;
					x = x->c[1];
					delete y;
					return true;
				};
				if(x->c[1]->size == 0)
				{
					y = x;
					x = x->c[0];
					delete y;
					return true;
				};
				y = x->c[0];
				while(y->c[1]->size != 0)
				    y = y->c[1];
				x->key = y->key;
				x->size--;
				del(x->c[0] , x->key);
				return true;
			}else{
				bool l = k < x->key;
				if(del(x->c[l] , k))
				{
				    x->size--;
				    return true;
				};
			};
		};
		inline node * search(node * &x , int & k)
		{
			if(x->size == 0 || k == x->key)
			{
				return x;
			}else{
				bool l = k < x->key;
				search(x->c[l] , k);
			};
		};
	public:
		SBT()
		{
			nil = new node(0);
			nil->size = 0;
			nil->c[0] = nil;
			nil->c[1] = nil;
			root = nil;
		};
		inline void Insert(int k)
		{
			insert(root , k);
		};
		inline void Delete(int k)
		{
			del(root , k);
		};
		inline void Search(int k)
		{
			search(root , k);
		};
		inline int Size()
		{
			return root->size;
		};
};