int cnt,root;			//可重复，s表示节点的值的个数
struct Treap{				//rand()可能问题
    int l,r;
    int fix,key,size,s;
}tr[maxn];
inline void updata(int a){tr[a].size=tr[a].s+tr[tr[a].l].size+tr[tr[a].r].size;}
inline int newtreap(int _val){++cnt;tr[cnt].l=tr[cnt].r=0;tr[cnt].fix=rand();tr[cnt].key=_val;tr[cnt].size=tr[cnt].s=1;return cnt;}
void init(){srand((int)time(0));root=cnt=0;tr[0].size=tr[0].s=tr[0].l=tr[0].r=0;}
int Merge(int A,int B){//合并操作
    if(!A)return B;
    if(!B)return A;
    if(tr[A].fix<tr[B].fix){
        tr[A].r=Merge(tr[A].r,B);
        updata(A);
        return A;
    }else{
        tr[B].l=Merge(A,tr[B].l);
        updata(B);
        return B;
    }
}
pair<int,int> Split(int x,int k){//拆分操作前k
    if(!x)return mp(0,0);
    pair<int,int> y;
    if(tr[tr[x].l].size>=k){
        y=Split(tr[x].l,k);
        tr[x].l=y.second;
        updata(x);
        y.second=x;
    }else{
        y=Split(tr[x].r,k-tr[tr[x].l].size-tr[x].s);
        tr[x].r=y.first;
        updata(x);
        y.first=x;
    }
    return y;
}
void Build(int *a){//建造操作		已经sort,a[0]为size
    static int stack[maxn],x,last;
    int p=0;
    for(int i=1;i<=a[0];++i){
        if(p&&a[i]==tr[stack[p]].key){tr[stack[p]].s++;updata(stack[p]);continue;}
        x=newtreap(a[i]);
        last=0;
        while(p && tr[stack[p]].fix>tr[x].fix){
            updata(stack[p]);
            last=stack[p];
            stack[p--]=0;
        }
        if(p) tr[stack[p]].r=x;
        tr[x].l=last;
        stack[++p]=x;
    }
    while(p) updata(stack[p--]);
    root=stack[1];
}
int Findkth(int t,int k){//查找第K小
    while(t)
    {
        if(tr[tr[t].l].size<k&&tr[tr[t].l].size+tr[t].s>=k)
            return tr[t].key;
        else if(tr[tr[t].l].size+tr[t].s<k)
        {
            k-=tr[tr[t].l].size+tr[t].s;
            t=tr[t].r;
        }
        else
            t=tr[t].l;
    }
    return 0;
}
int Getkth(int x,int v){//询问一个数v是第几大,最大可能
    if(!x)return 0;
    return v<tr[x].key?Getkth(tr[x].l,v):Getkth(tr[x].r,v)+tr[tr[x].l].size+tr[x].s;
}
void Insert(int v){//插入操作
    pair<int,int> x=Split(root,Getkth(root,v-1));
    pair<int,int> y=Split(x.second,Getkth(x.second,v));
    if(y.first==0)y.first=newtreap(v);
    else tr[y.first].s++,tr[y.first].size++;
    root=Merge(Merge(x.first,y.first),y.second);
}
void Delete(int k){//删除操作 1个k
    pair<int,int> x=Split(root,Getkth(root,k-1));
    pair<int,int> y=Split(x.second,Getkth(x.second,k));
    if(y.first==0||tr[y.first].s==1)y.first=0;
    else tr[y.first].s--,tr[y.first].size--;
    root=Merge(Merge(x.first,y.first),y.second);
}