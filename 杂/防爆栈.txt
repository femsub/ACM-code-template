void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last); 
**********************************
3f c0 -1 0 

-Wno-format -Wno-sign-compare
******************************
c++:
#pragma comment(linker, "/STACK:1024000000,1024000000");

g++:
32
int size = 256 << 20; // 256MB  
char *p = (char*)malloc(size) + size;  
__asm__("movl %0, %%esp\n" :: "r"(p));  

64
int size = 256 << 20; // 256MB
char *p = (char*)malloc(size) + size;
__asm__("movq %0, %%rsp\n" :: "r"(p));

/////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;
extern int main2(void) __asm__("main2");
int main2(){
    // Code
    exit( 0 );
}
int main(){
    int size = 256 << 20;
    char *p = (char*)malloc(size) + size;
    __asm__ __volatile__("movq %0,%%rsp\n"
                         "pushq $exit\n"
                         "jmp main2\n"
                         ::"r"(p));
    return 0;
}

/***********************/

原型
int sprintf( char *buffer, const char *format, [ argument] … );
参数列表
buffer：char型指针，指向将要写入的字符串的缓冲区。
format：格式化字符串。
[argument]...：可选参数，可以是任何类型的数据。
返回值：字符串长度（strlen）

long int strtol(const char *nptr,char **endptr,int base);
参数base范围从2至36，或0。参数base代表采用的进制方式，如base值为10则采用10进制，若base值为16则采用16进制等。当base值为0时则是采用10进制做转换，但遇到如’0x’前置字符则会使用16进制做转换、遇到’0’前置字符而不是’0x’的时候会使用8进制做转换。
一开始strtol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时('\0')结束转换，并将结果返回。若参数endptr不为NULL，则会将遇到不合条件而终止的nptr中的字符指针由endptr返回；若参数endptr为NULL，则会不返回非法字符串。

/***********************/

random_shuffle(all(p));

/***********************/

(x1!=x2)?(x1<x2):(y1<y2);
bool operator <(const Node&a) const  {  return y < a.y; }

int cmp1(const cu &a,const cu &b) {return a.p1 < b.p1;}


bool operator<(const TMax &a, const TMax &b)const
{
	return a.x<b.x;
} 


class Comp
{
public:
bool operator()(const bitset<50>& left, const bitset<50>& right)
{
		for(int x=49;x>=0;x--)
				if(left[x]!=right[x])
						return left[x] < right[x];
}
};
set<bitset<50>,Comp>q;

/***********************/

priority_queue<int, vector<int>, greater<int> > 

//小顶

/***********************/

int up(int u){return(ro[u]==u)?u:ro[u]=up(ro[u]);}

/***********************/

#include <ext/pb_ds/priority_queue.hpp>
using namespace __gnu_pbds;
typedef __gnu_pbds::priority_queue< pair<long long,int> , greater<pair<long long,int> > ,thin_heap_tag> myheap;


#include<ext/rope> 
using namespace __gnu_cxx; 
rope<char> *his[maxn];  
his[i]=new rope<char>(*his[i-1]);  
************************
unordered_map<int,int>q;
	q.reserve(1024);
	q.max_load_factor(0.25);
*************************
random

(rand()<<16)+rand()

default_random_engine generator((int)time(0));
uniform_int_distribution<int> dis(1,100);
使用dis(generator)  []
/***********************/
__builtin_ffs (unsigned int x) 返回x的最后一位1的是从后向前第几位，比如7368（1110011001000）返回4。
__builtin_clz(); 前导0个数
__builtin_ctz();	后
__builtin_popcount();	1个数
__builtin_popcountll();


判断n是否是2的正整数冪
(!(n&(n-1)) )&& n             0除外
!(n&(n-1))		      包括0

mod 2^k 呢？（对2的倍数取模）
n&((1<<k)-1)

x%4    ==  x&3        x>=0

枚举出一个集合的子集。设原集合为mask，则下面的代码就可以列出它的所有子集：乱序
　　for (i = mask ; i ; i = (i - 1) & mask) ;

int k=4,n=8;
		for(int comb=(1<<k)-1,temp1,temp2;comb<1<<n;temp1=comb&-comb,temp2=comb+temp1,comb=((comb&~temp2)/temp1>>1)|temp2)

升序枚举出含k个元素的子集

/***********************/
int pepper(int g)
{
	int hehe=618*sin(618);
	g=abs(g);
	return (g^hehe)+166;
}		//玄学随机数


/**************************/
构造函数
bitset<n> b;
 b有n位，每位都为0.参数n可以为一个表达式.
如bitset<5> b0;则"b0"为"00000";
 
bitset<n> b(unsigned long u);
 b有n位,并用u赋值;如果u超过n位,则顶端被截除
如:bitset<5>b0(5);则"b0"为"00101";
 
bitset<n> b(string s);
 b是string对象s中含有的位串的副本
string bitval ( "10011" );
bitset<5> b0 ( bitval4 );
则"b0"为"10011";

bitset<n> b(s, pos);
 b是s中从位置pos开始位的副本,前面的多余位自动填充0;
string bitval ("01011010");
bitset<10> b0 ( bitval5, 3 );
则"b0" 为 "0000011010";
 
bitset<n> b(s, pos, num);
 b是s中从位置pos开始的num个位的副本,如果num<n,则前面的空位自动填充0;
string bitval ("11110011011");
bitset<6> b0 ( bitval5, 3, 6 );
则"b0" 为 "100110";

os << b把b中的位集输出到os流

os >>b输入到b中,如"cin>>b",如果输入的不是0或1的字符,只取该字符前面的二进制位.

bool any( ) 是否存在置为1的二进制位？和none()相反
 
bool none( ) 是否不存在置为1的二进制位,即全部为0？和any()相反.
 
size_t count( )二进制位为1的个数.
 
size_t size( )二进制位的个数

flip()把所有二进制位逐位取反
 
flip(size_t pos)把在pos处的二进制位取反
 
bool operator[](   size_type _Pos )获取在pos处的二进制位
 
set()把所有二进制位都置为1
 
set(pos)把在pos处的二进制位置为1
 
reset()把所有二进制位都置为0
 
reset(pos)把在pos处的二进制位置为0

test(size_t pos)在pos处的二进制位是否为1？

unsigned long to_ulong( )用同样的二进制位返回一个unsigned long值

string to_string ()返回对应的字符串.