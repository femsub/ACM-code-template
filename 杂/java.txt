import java.io.*;
import java.util.*;
import java.math.*;

public class Main
{
    public static void main(String args[]) throws Exception
    {
        Scanner in = new Scanner(new File("in.txt"));
        PrintWriter out = new PrintWriter(new FileWriter("out.txt",true));
        //Scanner in = new Scanner(System.in);
	//PrintWriter out = new PrintWriter(System.out);
       int n = in.nextInt();
        out.println(ans[n]);
        out.close();
    }
}

.divide(BigDecimal.valueOf(k),100,BigDecimal.ROUND_DOWN)
charAt
BigInteger


*****************************atan

static BigDecimal pi=new BigDecimal("3.14159265358979")
        ,pi4,pi2,pi22;
static int len=7;
static BigDecimal eps=BigDecimal.valueOf(1e-5);
static BigDecimal atan(BigDecimal s)
{
    BigDecimal ans=s,tem=s;
    for(int i=1;i<=50;i++)
    {               //System.out.println(i);
        tem=tem.multiply(s).multiply(s);
        int k=2*i+1;
        if(i%2==0)    
            ans=ans.add(tem.divide(BigDecimal.valueOf(k),len,BigDecimal.ROUND_DOWN));
        else
            ans=ans.subtract(tem.divide(BigDecimal.valueOf(k),len,BigDecimal.ROUND_DOWN));
    }
    return ans;
}
static BigDecimal atan(BigDecimal x,BigDecimal y)
{
    if(x.equals(BigDecimal.ZERO))
    {
        if(y.compareTo(BigDecimal.ZERO)>0)return pi2;
        else return pi2.negate();
    }
    if(y.equals(BigDecimal.ZERO))
    {
        if(x.compareTo(BigDecimal.ZERO)>0)return BigDecimal.ZERO;
        else return pi.negate();
    }
    BigDecimal ans,s=y.divide(x,len*3,BigDecimal.ROUND_DOWN),s1=x.divide(y,len*3,BigDecimal.ROUND_DOWN);      
                                                            //System.out.println(s);
    if(s.compareTo(BigDecimal.ONE)>0)ans=pi2.subtract(atan(s1));
    else if(s.compareTo(BigDecimal.ONE.negate())>0)ans=atan(s);
    else ans=atan(s1.negate()).subtract(pi2);
    
    if(x.compareTo(BigDecimal.ZERO)<0)return ans.add(pi);
    return ans;
}

	pi4=pi.divide(BigDecimal.valueOf(4));
        pi2=pi.divide(BigDecimal.valueOf(2));
        pi22=pi.multiply(BigDecimal.valueOf(2));