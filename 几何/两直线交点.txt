struct Point
{
	double x,y;
	Point(double _x=0,double _y=0)
	{
		x=_x;y=_y;
	}
	Point operator -(const Point &p)const
	{
		return Point(x-p.x,y-p.y);
	}
};
int sgn(double v){return abs(v)<esp?0:v<0?-1:1;}
double det(Point u,Point v){return u.x*v.x+u.y*v.y;}
double sqr(double v){return v*v;}
struct Segment
{
	Point st,ed;
	double angle;
	void get_angle()
	{
		angle=atan2(ed.y-st.y,ed.x-st.x);
	}
	bool operator <(const Segment &p)const
	{
		if(sgn(angle-p.angle))return angle<p.angle;
		else return sgn(det(ed-st,p.ed-st))<0;
	}
	double len()
	{
		return sqrt(sqr(st.x-ed.x)+sqr(st.y-ed.y));
	}
};
Point Insect(Segment &p,Segment &q)
{
	double u=det(p.ed-p.st,q.st-p.st),v=det(p.st-p.ed,q.ed-p.st);
	return Point((q.st.x*v+q.ed.x*u)/(u+v),(q.st.y*v+q.ed.y*u)/(u+v));





***********************

struct line
{
    double a, b, c;

    line(double a = 0, double b = 0, double c = 0) : a(a), b(b), c(c) {}

	//判断是否与直线l相交
    bool check_lines_intersect(const line &l) const{
        return fabs(point(a, b) ^ point(l.a, l.b)) < eps ? false : true;
    }

	//求与直线l的交点
    point lines_intersect(const line &l) const{
        double d = point(a, b) ^ point(l.a, l.b);
        return point((point(b, c) ^ point(l.b, l.c)) / d, (point(c, a) ^ point(l.c, l.a)) / d);
    }
};
line point_to_line(point a,point b)
{
	return line(a.y-b.y,b.x-a.x,a.x*b.y-a.y*b.x);
}
line line_symmetry_point(line A,point k)
{
	return line(A.a,A.b,(-A.c-2*A.a*k.x-2*A.b*k.y));
}
bool is_integerpoint(point a)
{
	return abs(round(a.x)-a.x)<eps&&abs(round(a.y)-a.y)<eps;
}
}