struct arr
{
  int d[2],max[2],min[2],l,r,id;
  arr() {l=0;r=0;id=0;}
}a[maxn];
int D,root,ans;
inline int cmp(arr a,arr b){return a.d[D]<b.d[D]||(a.d[D]==b.d[D]&&a.d[D^1]<b.d[D^1]);}
inline void up(int k,int s)
{
  a[k].min[0]=min(a[k].min[0],a[s].min[0]);
  a[k].max[0]=max(a[k].max[0],a[s].max[0]);
  a[k].min[1]=min(a[k].min[1],a[s].min[1]);
  a[k].max[1]=max(a[k].max[1],a[s].max[1]);
}
int build(int l,int r,int dd)
{
  D=dd;int mid=(l+r)>>1;
  nth_element(a+l+1,a+mid+1,a+r+1,cmp);
  a[mid].min[0]=a[mid].max[0]=a[mid].d[0];
  a[mid].min[1]=a[mid].max[1]=a[mid].d[1];
  if (l!=mid) a[mid].l=build(l,mid-1,dd^1);
  if (mid!=r) a[mid].r=build(mid+1,r,dd^1);
  if (a[mid].l) up(mid,a[mid].l);
  if (a[mid].r) up(mid,a[mid].r);
  return mid;
}
void insert(int k)
{
  int p=root;D=0;
  while (1)
  {
	up(p,k);
	if (a[k].d[D]<=a[p].d[D]){if (!a[p].l) {a[p].l=k;return;} p=a[p].l;}
	else {if (!a[p].r) {a[p].r=k;return;} p=a[p].r;}
	D^=1;
  }
}
int qux,quy;
int getdis(int k)
{
  int res=0;
  if (qux<a[k].min[0]) res+=a[k].min[0]-qux;
  if (qux>a[k].max[0]) res+=qux-a[k].max[0];
  if (quy<a[k].min[1]) res+=a[k].min[1]-quy;
  if (quy>a[k].max[1]) res+=quy-a[k].max[1];
  return res;
}
void ask(int k)
{
  int d0=abs(a[k].d[0]-qux)+abs(a[k].d[1]-quy);
  if (d0<ans) ans=d0;
  int dl=(a[k].l)?getdis(a[k].l):INF;
  int dr=(a[k].r)?getdis(a[k].r):INF;
  if (dl<dr){if (dl<ans) ask(a[k].l);if (dr<ans) ask(a[k].r);}
  else {if (dr<ans) ask(a[k].r);if (dl<ans) ask(a[k].l);}
}



****************************
	for(int x=1;x<=n;x++)
		scanf("%d%d",&a[x].d[0],&a[x].d[1]),a[x].id=x;
	ans=INF;
	root=build(1,n,0);
	ask(root);



我们可以想象在平面上有N个点。首先，按横坐标排序找到最中间的那个点。然后水平划一条线，把平面分成左右两个部分。再递归调用左右两块。注意，在第二次（偶数次）调用的时候，是找到纵坐标中最中间的点，并垂直画一条线。

这样效率看上去很好。维护的时候有点像线段树。每个点记录它的坐标、它辖管的区间4个方向的极值、它的左右（或上下）的两个点的标号。递归两个子树时，注意要up更新这个点辖管的范围。




