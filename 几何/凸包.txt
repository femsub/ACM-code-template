struct point{
        double x,y;
        point(){x=y=0;}
        point(double x,double y):x(x),y(y){};
        point operator+(const point &a){return point(x+a.x,y+a.y);}
        point operator-(const point &a){return point(x-a.x,y-a.y);}
        double operator*(const point &a){return a.x*x+a.y*y;}
        point operator*(const double &a){return point(a*x,a*y);}
		point operator/(const double &a){return point(x/a,y/a);}
        double operator^(const point &a){return x*a.y-y*a.x;}
        bool operator<(const point &a)const{
        	if(abs(x-a.x)>eps)return x<a.x;
        	return y<a.y-eps;
		}
		double length(){return hypot(x,y);}
        void pr(){printf("%.2f %.2f\n",x,y);}
};
point operator*(double const &a,point const &b){return point(a*b.x,a*b.y);}
vector<point>in,out;
void convex()
{
    sort(in.begin(),in.end());
    in.erase(unique(in.begin(),in.end(),
		[](const point& a,const point& b){return abs(a.x-b.x)<eps&&abs(a.y-b.y)<eps;}),in.end());
    int k=0,n=in.size();
    out.clear();
    if(!n)return;
    out.resize(2*n);
    for(int i=0;i<n;i++){                                                   //开始和最后一个肯定是
        while(k>1&&((out[k-1]-out[k-2])^(in[i]-out[k-1]))<eps)k--;
        out[k++]=in[i];
    }
    for(int i=n-2,t=k;i>=0;i--){
        while(k>t&&((out[k-1]-out[k-2])^(in[i]-out[k-1]))<eps)k--;
        out[k++]=in[i];
    }
    if(k>=2)out.resize(k-1);
    else out.resize(k);
    return;
}