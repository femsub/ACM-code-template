//#include <bits/stdc++.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <string>
#include <time.h>
using namespace std;
long double esp=1e-8;
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#define fi first
#define se second
#define all(a) (a).begin(),(a).end()
#define cle(a) while(!a.empty())a.pop()
#define mem(p,c) memset(p,c,sizeof(p))
#define mp(A, B) make_pair(A, B)
#define pb push_back
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
typedef long long int LL;
const long double PI = acos((long double)-1);
const LL INF=0x3f3f3f3fll;
const int MOD =1000000007ll;
const int maxn=100010;
struct Point
{
	double x,y;
	Point(double _x=0,double _y=0)
	{
		x=_x;y=_y;
	}
	Point operator -(const Point &p)const
	{
		return Point(x-p.x,y-p.y);
	}
}p[maxn*2];
int sgn(double v){return abs(v)<esp?0:v<0?-1:1;}
double det(Point u,Point v){return u.x*v.y-u.y*v.x;}	//determine
double sqr(double v){return v*v;}
struct Segment					//×ó²à
{
	Point st,ed;
	double angle;
	void get_angle()
	{
		angle=atan2(ed.y-st.y,ed.x-st.x);
	}
	bool operator <(const Segment &p)const
	{
		if(sgn(angle-p.angle))return angle<p.angle;
		else return sgn(det(ed-st,p.ed-st))<0;
	}
	double len()
	{
		return sqrt(sqr(st.x-ed.x)+sqr(st.y-ed.y));
	}
}seg[maxn],deq[maxn*2];
bool isout(Segment p,Point q)
{
	return sgn(det(p.ed-p.st,q-p.st))<0;
}
bool isparallel(Segment p,Segment q)
{
	return sgn(det(p.ed-p.st,q.ed-q.st))==0;
}
Point Insect(Segment &p,Segment &q)
{
	double u=det(p.ed-p.st,q.st-p.st),v=det(p.st-p.ed,q.ed-p.st);
	return Point((q.st.x*v+q.ed.x*u)/(u+v),(q.st.y*v+q.ed.y*u)/(u+v));
}

int HPI(int n)
{
	int i,len=1,bot=0,top=1,m=0;;
	for(i=0;i<n;++i)seg[i].get_angle();
	sort(seg,seg+n);
	for(i=1;i<n;++i)
		if(sgn(seg[i].angle-seg[len-1].angle))seg[len++]=seg[i];
	deq[0]=seg[0];deq[1]=seg[1];
	for(i=2;i<len;++i)
	{
		if(isparallel(deq[top],deq[top-1])||isparallel(deq[bot],deq[bot+1]))return m;
		while(bot<top&&isout(seg[i],Insect(deq[top],deq[top-1])))--top;
		while(bot<top&&isout(seg[i],Insect(deq[bot],deq[bot+1])))++bot;
		deq[++top]=seg[i];
	}
	while(bot<top&&isout(deq[bot],Insect(deq[top],deq[top-1])))--top;
	while(bot<top&&isout(deq[top],Insect(deq[bot],deq[bot+1])))++bot;
	if(bot+1>=top)return m;
	for(i=bot;i<top;i++)
		p[m++]=Insect(deq[i],deq[i+1]);
	p[m++]=Insect(deq[bot],deq[top]);
	return m;
}
double calarea(int m)
{
	double area=0;
	for(int i=1;i<m-1;i++)
		area+=det((p[i]-p[0]),(p[i+1]-p[0]));
	return abs(area)/2.0;
}
int main()
{
	int n,i;
	while(scanf("%d",&n)!=EOF)
	{
		seg[0].st.x=0,seg[0].st.y=0,seg[0].ed.x=10000,seg[0].ed.y=0;seg[0].get_angle();
		seg[1].st.x=10000,seg[1].st.y=0,seg[1].ed.x=10000,seg[1].ed.y=10000;seg[1].get_angle();
		seg[2].st.x=10000,seg[2].st.y=10000,seg[2].ed.x=0,seg[2].ed.y=10000;seg[2].get_angle();
		seg[3].st.x=0,seg[3].st.y=10000,seg[3].ed.x=0,seg[3].ed.y=0;seg[3].get_angle();
		for(i=0;i<n;i++)
		{
			scanf("%lf %lf %lf %lf",&seg[i+4].st.x,&seg[i+4].st.y,&seg[i+4].ed.x,&seg[i+4].ed.y);
			seg[i+4].get_angle();
		}
		//for(i=0;i<n+4;i++)cout <<seg[i].st.x<<" "<<seg[i].st.y<<" "<<seg[i].ed.x<<" "<<seg[i].ed.y<<endl;
		printf("%.1f\n",calarea(HPI(n+4)));
	}
	return 0;
}
